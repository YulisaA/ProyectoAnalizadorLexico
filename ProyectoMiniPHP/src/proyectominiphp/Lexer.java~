/* The following code was generated by JFlex 1.6.1 */

package proyectominiphp;

import static proyectominiphp.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/DELL/Desktop/ProyectoAnalizadorLexico/ProyectoMiniPHP/src/proyectominiphp/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\37\1\36\1\104\1\104\1\103\22\0\1\37\1\76\1\110"+
    "\1\112\1\111\1\75\1\77\1\106\1\30\1\30\1\73\1\71\1\34"+
    "\1\72\1\102\1\74\1\24\1\27\6\26\2\25\1\0\1\35\1\21"+
    "\1\101\1\23\1\22\1\0\1\1\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\7\1\7\1\7\1\11\1\7\1\7\1\12\1\13"+
    "\1\7\1\14\1\15\1\16\1\17\1\7\1\7\1\20\1\7\1\7"+
    "\1\31\1\107\1\32\1\0\1\66\1\0\1\40\1\41\1\45\1\47"+
    "\1\52\1\57\1\65\1\53\1\55\1\7\1\70\1\51\1\60\1\46"+
    "\1\54\1\61\1\67\1\44\1\42\1\43\1\56\1\63\1\62\1\64"+
    "\1\50\1\7\1\33\1\100\1\33\1\0\6\7\1\105\172\7\u1f28\0"+
    "\1\104\1\104\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\3\2\1\3\1\1\1\3\2\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\24\2\5\14"+
    "\1\15\2\1\1\16\1\17\3\1\1\20\2\2\1\0"+
    "\1\3\1\21\3\0\1\4\1\22\1\0\1\2\1\23"+
    "\42\2\1\24\1\16\1\0\1\15\1\22\1\0\1\25"+
    "\3\0\2\26\2\2\1\0\1\4\2\22\1\0\1\4"+
    "\35\2\1\23\7\2\1\0\2\25\1\26\1\27\1\0"+
    "\4\22\21\2\1\23\12\2\1\20\1\26\2\22\24\2"+
    "\1\26\12\2\1\26\1\23\6\2\1\26\3\2\1\26"+
    "\2\2\1\26\1\2\1\26\1\2\1\0\1\2\2\0"+
    "\1\2\3\0\1\30\2\0\2\30";

  private static int [] zzUnpackAction() {
    int [] result = new int[260];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\226\0\341\0\u012c\0\u0177\0\u01c2\0\u020d"+
    "\0\u0258\0\u02a3\0\113\0\113\0\113\0\113\0\113\0\u02ee"+
    "\0\u0339\0\u0384\0\u03cf\0\u041a\0\u0465\0\u04b0\0\u04fb\0\u0546"+
    "\0\u0591\0\u05dc\0\u0627\0\u0672\0\u06bd\0\u0708\0\u0753\0\u079e"+
    "\0\u07e9\0\u0834\0\u087f\0\u08ca\0\u0915\0\u0960\0\u09ab\0\u09f6"+
    "\0\u0a41\0\113\0\u020d\0\u0a8c\0\u0ad7\0\u020d\0\u0b22\0\u0b6d"+
    "\0\u0bb8\0\u0c03\0\u0c4e\0\u0c99\0\u0ce4\0\u0d2f\0\113\0\113"+
    "\0\u0d7a\0\u0dc5\0\u0e10\0\u0e5b\0\u0ea6\0\u0b22\0\u0ef1\0\226"+
    "\0\u0f3c\0\u0f87\0\u0fd2\0\u101d\0\u1068\0\u10b3\0\u10fe\0\u1149"+
    "\0\u1194\0\u11df\0\u122a\0\u1275\0\u12c0\0\u130b\0\u1356\0\u13a1"+
    "\0\u13ec\0\u1437\0\u1482\0\u14cd\0\u1518\0\u1563\0\u15ae\0\u15f9"+
    "\0\u1644\0\u168f\0\u16da\0\u1725\0\u1770\0\u17bb\0\u1806\0\u1851"+
    "\0\u189c\0\u18e7\0\113\0\113\0\u1932\0\113\0\u197d\0\u0b6d"+
    "\0\113\0\u19c8\0\u0bb8\0\u1a13\0\u1a5e\0\u1aa9\0\u1af4\0\u1b3f"+
    "\0\u1b8a\0\u0d7a\0\u1bd5\0\u1c20\0\u1c6b\0\u0e10\0\u1cb6\0\u1d01"+
    "\0\u1d4c\0\u1d97\0\u1de2\0\u1e2d\0\u1e78\0\u1ec3\0\u1f0e\0\u1f59"+
    "\0\u1fa4\0\u1fef\0\u203a\0\u2085\0\u20d0\0\u211b\0\u2166\0\u21b1"+
    "\0\u21fc\0\u2247\0\u2292\0\u22dd\0\u2328\0\u2373\0\u23be\0\u2409"+
    "\0\u2454\0\u249f\0\u24ea\0\u2535\0\u2580\0\u25cb\0\u2616\0\u2661"+
    "\0\u26ac\0\u26f7\0\u2742\0\u278d\0\u0b6d\0\u0bb8\0\u27d8\0\226"+
    "\0\u2823\0\u286e\0\u28b9\0\u2904\0\u294f\0\u299a\0\u29e5\0\u2a30"+
    "\0\u2a7b\0\u2ac6\0\u2b11\0\u2b5c\0\u2ba7\0\u2bf2\0\u2c3d\0\u2c88"+
    "\0\u2cd3\0\u2d1e\0\u2d69\0\u2db4\0\u2dff\0\u2e4a\0\u2e95\0\u2ee0"+
    "\0\u2f2b\0\u2f76\0\u2fc1\0\u300c\0\u3057\0\u30a2\0\u30ed\0\u3138"+
    "\0\u3183\0\113\0\u31ce\0\u3219\0\u3264\0\u32af\0\u32fa\0\u3345"+
    "\0\u3390\0\u33db\0\u3426\0\u3471\0\u34bc\0\u3507\0\u3552\0\u359d"+
    "\0\u35e8\0\u3633\0\u367e\0\u36c9\0\u3714\0\u375f\0\u37aa\0\u37f5"+
    "\0\u3840\0\u388b\0\u38d6\0\u3921\0\u396c\0\u39b7\0\u3a02\0\u3a4d"+
    "\0\u3a98\0\u3ae3\0\u3b2e\0\u3b79\0\u3bc4\0\u3c0f\0\u3c5a\0\u3ca5"+
    "\0\u3cf0\0\u3d3b\0\u3d86\0\u3dd1\0\u3e1c\0\u3e67\0\u3eb2\0\u3efd"+
    "\0\u3f48\0\u3f93\0\u3fde\0\u4029\0\u4074\0\u40bf\0\u410a\0\u4155"+
    "\0\u41a0\0\u41eb\0\u4236\0\u4281\0\u42cc\0\u4317\0\u4362\0\113"+
    "\0\u43ad\0\u43f8\0\u41eb\0\u4236";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[260];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\5\3\1\4\7\3\1\5\2\3\1\6\1\7"+
    "\1\10\1\11\3\12\1\13\2\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\3\1\32\1\33\1\3\1\34\1\35"+
    "\1\36\1\37\1\3\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\2\3\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\21\1\0\1\3\1\60"+
    "\1\2\1\61\1\62\1\63\114\0\20\3\3\0\4\3"+
    "\10\0\31\3\14\0\1\3\6\0\1\64\17\3\3\0"+
    "\4\3\10\0\1\64\30\3\14\0\1\3\6\0\13\3"+
    "\1\65\4\3\3\0\4\3\10\0\4\3\1\65\24\3"+
    "\14\0\1\3\27\0\1\66\56\0\1\67\34\0\1\70"+
    "\170\0\1\67\13\0\1\71\2\0\1\72\12\0\1\73"+
    "\3\0\1\74\1\75\2\74\11\0\1\71\10\0\1\72"+
    "\11\0\1\73\15\0\1\76\15\0\1\72\16\0\4\12"+
    "\22\0\1\72\27\0\1\76\46\0\1\20\113\0\1\21"+
    "\43\0\1\21\10\0\20\3\3\0\4\3\10\0\1\3"+
    "\1\77\1\100\1\3\1\101\1\3\1\102\22\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\10\0\4\3\1\103"+
    "\24\3\14\0\1\3\6\0\20\3\3\0\4\3\10\0"+
    "\3\3\1\104\16\3\1\105\6\3\14\0\1\3\6\0"+
    "\13\3\1\65\4\3\3\0\4\3\10\0\4\3\1\106"+
    "\6\3\1\107\15\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\10\0\12\3\1\110\16\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\10\0\1\111\10\3\1\112\2\3"+
    "\1\113\14\3\14\0\1\3\6\0\20\3\3\0\4\3"+
    "\10\0\1\114\11\3\1\115\16\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\10\0\12\3\1\116\1\3\1\100"+
    "\1\117\13\3\14\0\1\3\6\0\20\3\3\0\4\3"+
    "\10\0\15\3\1\120\13\3\14\0\1\3\6\0\20\3"+
    "\3\0\4\3\10\0\5\3\1\121\1\122\2\3\1\123"+
    "\6\3\1\124\2\3\1\125\1\126\4\3\14\0\1\3"+
    "\6\0\20\3\3\0\4\3\10\0\4\3\1\100\24\3"+
    "\14\0\1\3\6\0\20\3\3\0\4\3\10\0\2\3"+
    "\1\127\3\3\1\130\10\3\1\100\1\131\10\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\10\0\2\3\1\117"+
    "\3\3\1\127\22\3\14\0\1\3\6\0\1\64\17\3"+
    "\3\0\4\3\10\0\1\64\13\3\1\132\1\133\1\134"+
    "\12\3\14\0\1\3\6\0\20\3\3\0\4\3\10\0"+
    "\4\3\1\135\11\3\1\136\12\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\10\0\13\3\1\137\15\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\10\0\1\34\30\3"+
    "\14\0\1\3\6\0\20\3\3\0\4\3\10\0\14\3"+
    "\1\34\14\3\14\0\1\3\6\0\20\3\3\0\4\3"+
    "\10\0\11\3\1\140\2\3\1\141\14\3\14\0\1\3"+
    "\6\0\20\3\3\0\4\3\10\0\26\3\1\142\2\3"+
    "\14\0\1\3\31\0\1\11\3\12\41\0\1\143\7\0"+
    "\1\144\1\76\34\0\1\11\3\12\42\0\1\143\6\0"+
    "\1\144\1\76\103\0\1\52\5\0\1\144\104\0\1\145"+
    "\1\63\4\0\1\144\110\0\1\146\113\0\1\146\36\0"+
    "\4\147\63\0\30\150\1\0\5\150\1\0\47\150\1\151"+
    "\1\152\3\150\30\153\1\0\5\153\1\0\50\153\1\154"+
    "\1\151\2\153\1\0\13\155\1\156\4\155\17\0\4\155"+
    "\1\156\24\155\14\0\1\155\5\0\36\63\1\0\44\63"+
    "\3\0\5\63\1\0\10\3\1\157\7\3\3\0\4\3"+
    "\10\0\11\3\1\157\17\3\14\0\1\3\6\0\16\3"+
    "\1\160\1\3\3\0\4\3\10\0\16\3\1\160\12\3"+
    "\14\0\1\3\20\0\1\161\45\0\1\161\55\0\1\162"+
    "\2\0\1\162\107\0\1\163\3\164\41\0\2\165\21\0"+
    "\6\166\15\0\4\166\10\0\2\166\3\0\1\166\1\0"+
    "\1\166\2\0\1\166\4\0\1\166\40\0\1\72\16\0"+
    "\1\74\1\75\2\74\22\0\1\72\27\0\1\76\15\0"+
    "\1\72\16\0\4\75\22\0\1\72\27\0\1\76\11\0"+
    "\20\3\3\0\4\3\10\0\2\3\1\167\26\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\10\0\4\3\1\170"+
    "\24\3\14\0\1\3\6\0\20\3\3\0\4\3\10\0"+
    "\7\3\1\100\21\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\10\0\12\3\1\171\16\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\10\0\1\172\30\3\14\0\1\3"+
    "\6\0\20\3\3\0\4\3\10\0\15\3\1\173\13\3"+
    "\14\0\1\3\6\0\16\3\1\160\1\3\3\0\4\3"+
    "\10\0\1\174\7\3\1\100\5\3\1\160\12\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\10\0\4\3\1\175"+
    "\24\3\14\0\1\3\6\0\20\3\3\0\4\3\10\0"+
    "\3\3\1\176\23\3\1\177\1\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\10\0\2\3\1\117\1\200\5\3"+
    "\1\201\17\3\14\0\1\3\6\0\20\3\3\0\4\3"+
    "\10\0\1\202\13\3\1\203\14\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\10\0\6\3\1\204\22\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\10\0\20\3\1\205"+
    "\10\3\14\0\1\3\6\0\20\3\3\0\4\3\10\0"+
    "\22\3\1\100\6\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\10\0\5\3\1\206\11\3\1\207\11\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\10\0\12\3\1\100"+
    "\16\3\14\0\1\3\6\0\20\3\3\0\4\3\10\0"+
    "\2\3\1\210\26\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\10\0\13\3\1\211\15\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\10\0\7\3\1\212\21\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\10\0\2\3\1\213"+
    "\26\3\14\0\1\3\6\0\20\3\3\0\4\3\10\0"+
    "\21\3\1\214\7\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\10\0\1\215\30\3\14\0\1\3\6\0\20\3"+
    "\3\0\4\3\10\0\3\3\1\216\11\3\1\210\13\3"+
    "\14\0\1\3\6\0\20\3\3\0\4\3\10\0\2\3"+
    "\1\217\26\3\14\0\1\3\6\0\20\3\3\0\4\3"+
    "\10\0\2\3\1\220\1\221\1\3\1\222\23\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\10\0\21\3\1\223"+
    "\7\3\14\0\1\3\6\0\20\3\3\0\4\3\10\0"+
    "\4\3\1\224\24\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\10\0\6\3\1\125\22\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\10\0\6\3\1\225\22\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\10\0\14\3\1\226"+
    "\1\227\13\3\14\0\1\3\6\0\20\3\3\0\4\3"+
    "\10\0\1\3\1\230\27\3\14\0\1\3\6\0\20\3"+
    "\3\0\4\3\10\0\15\3\1\231\13\3\14\0\1\3"+
    "\6\0\20\3\3\0\4\3\10\0\14\3\1\232\14\3"+
    "\14\0\1\3\6\0\20\3\3\0\4\3\10\0\3\3"+
    "\1\211\25\3\14\0\1\3\6\0\20\3\3\0\4\3"+
    "\10\0\13\3\1\233\15\3\14\0\1\3\5\0\30\145"+
    "\1\0\42\145\1\234\1\0\16\145\5\0\1\72\16\0"+
    "\4\147\22\0\1\72\40\0\30\150\1\0\5\150\1\0"+
    "\47\150\1\235\1\152\3\150\30\153\1\0\5\153\1\0"+
    "\50\153\1\154\1\236\2\153\1\0\20\155\3\0\4\155"+
    "\10\0\31\155\14\0\1\155\6\0\4\155\1\237\13\155"+
    "\3\0\4\155\10\0\12\155\1\237\16\155\14\0\1\155"+
    "\6\0\14\3\1\160\3\3\3\0\4\3\10\0\2\3"+
    "\1\160\26\3\14\0\1\3\6\0\4\3\1\240\13\3"+
    "\3\0\4\3\10\0\12\3\1\240\16\3\14\0\1\3"+
    "\15\0\1\241\42\0\1\241\37\0\2\242\1\243\15\242"+
    "\1\244\3\242\1\245\1\242\2\245\6\242\1\0\2\242"+
    "\1\243\22\242\1\244\16\242\3\0\31\242\4\164\6\242"+
    "\1\0\44\242\3\0\5\242\24\0\1\163\3\164\64\0"+
    "\20\3\3\0\4\3\10\0\3\3\1\246\25\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\10\0\1\247\30\3"+
    "\14\0\1\3\6\0\20\3\3\0\4\3\10\0\1\250"+
    "\30\3\14\0\1\3\6\0\20\3\3\0\4\3\10\0"+
    "\3\3\1\251\25\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\10\0\3\3\1\200\25\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\10\0\15\3\1\210\13\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\10\0\14\3\1\115"+
    "\14\3\14\0\1\3\6\0\20\3\3\0\4\3\10\0"+
    "\16\3\1\252\12\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\10\0\16\3\1\253\12\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\10\0\5\3\1\254\23\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\10\0\11\3\1\255"+
    "\17\3\14\0\1\3\6\0\20\3\3\0\4\3\10\0"+
    "\2\3\1\256\26\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\10\0\6\3\1\117\22\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\10\0\2\3\1\210\1\257\25\3"+
    "\14\0\1\3\6\0\20\3\3\0\4\3\10\0\12\3"+
    "\1\260\16\3\14\0\1\3\6\0\20\3\3\0\4\3"+
    "\10\0\11\3\1\261\17\3\14\0\1\3\6\0\20\3"+
    "\3\0\4\3\10\0\1\262\30\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\10\0\3\3\1\100\25\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\10\0\14\3\1\100"+
    "\14\3\14\0\1\3\6\0\20\3\3\0\4\3\10\0"+
    "\2\3\1\263\4\3\1\264\5\3\1\265\1\3\1\266"+
    "\2\3\1\41\6\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\10\0\12\3\1\267\16\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\10\0\3\3\1\247\25\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\10\0\11\3\1\100"+
    "\17\3\14\0\1\3\6\0\20\3\3\0\4\3\10\0"+
    "\12\3\1\270\16\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\10\0\12\3\1\210\16\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\10\0\3\3\1\271\25\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\10\0\12\3\1\272"+
    "\16\3\14\0\1\3\6\0\20\3\3\0\4\3\10\0"+
    "\11\3\1\273\17\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\10\0\11\3\1\274\17\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\10\0\12\3\1\275\16\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\10\0\5\3\1\276"+
    "\23\3\14\0\1\3\6\0\20\3\3\0\4\3\10\0"+
    "\3\3\1\277\25\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\10\0\6\3\1\210\14\3\1\300\5\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\10\0\11\3\1\251"+
    "\17\3\14\0\1\3\6\0\20\3\3\0\4\3\10\0"+
    "\11\3\1\117\17\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\10\0\1\3\1\125\27\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\10\0\1\301\30\3\14\0\1\3"+
    "\101\0\1\302\17\0\2\155\1\303\15\155\3\0\4\155"+
    "\10\0\5\155\1\303\23\155\14\0\1\155\20\0\1\70"+
    "\45\0\1\70\55\0\4\242\107\0\1\304\2\242\1\304"+
    "\64\0\6\305\15\0\4\305\10\0\2\305\3\0\1\305"+
    "\1\0\1\305\2\0\1\305\4\0\1\305\33\0\24\242"+
    "\1\245\1\242\2\245\6\242\1\0\44\242\3\0\5\242"+
    "\1\0\20\3\3\0\4\3\10\0\4\3\1\306\24\3"+
    "\14\0\1\3\6\0\20\3\3\0\4\3\10\0\10\3"+
    "\1\100\20\3\14\0\1\3\6\0\20\3\3\0\4\3"+
    "\10\0\30\3\1\100\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\10\0\15\3\1\307\13\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\10\0\4\3\1\310\24\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\10\0\15\3\1\311"+
    "\13\3\14\0\1\3\6\0\20\3\3\0\4\3\10\0"+
    "\13\3\1\100\15\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\10\0\1\312\30\3\14\0\1\3\6\0\20\3"+
    "\3\0\4\3\10\0\2\3\1\100\26\3\14\0\1\3"+
    "\6\0\20\3\3\0\4\3\10\0\15\3\1\313\13\3"+
    "\14\0\1\3\6\0\20\3\3\0\4\3\10\0\2\3"+
    "\1\314\26\3\14\0\1\3\6\0\20\3\3\0\4\3"+
    "\10\0\1\315\30\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\10\0\16\3\1\316\12\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\10\0\22\3\1\105\6\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\10\0\12\3\1\317"+
    "\16\3\14\0\1\3\6\0\20\3\3\0\4\3\10\0"+
    "\17\3\1\100\11\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\10\0\14\3\1\132\14\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\10\0\15\3\1\265\13\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\10\0\6\3\1\320"+
    "\22\3\14\0\1\3\6\0\20\3\3\0\4\3\10\0"+
    "\1\321\11\3\1\322\16\3\14\0\1\3\6\0\20\3"+
    "\3\0\4\3\10\0\4\3\1\323\24\3\14\0\1\3"+
    "\6\0\20\3\3\0\4\3\10\0\16\3\1\324\12\3"+
    "\14\0\1\3\6\0\20\3\3\0\4\3\10\0\12\3"+
    "\1\325\16\3\14\0\1\3\6\0\20\3\3\0\4\3"+
    "\10\0\1\200\30\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\10\0\3\3\1\326\25\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\10\0\12\3\1\327\16\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\10\0\1\330\30\3"+
    "\14\0\1\3\6\0\20\3\3\0\4\3\10\0\11\3"+
    "\1\331\17\3\14\0\1\3\6\0\11\155\1\332\6\155"+
    "\3\0\4\155\10\0\14\155\1\332\14\155\14\0\1\155"+
    "\5\0\24\242\1\304\2\242\1\304\6\242\1\0\44\242"+
    "\3\0\6\242\6\305\15\242\4\305\6\242\1\0\1\242"+
    "\2\305\3\242\1\305\1\242\1\305\2\242\1\305\4\242"+
    "\1\305\23\242\3\0\5\242\1\0\20\3\3\0\4\3"+
    "\10\0\1\333\30\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\10\0\5\3\1\100\23\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\10\0\6\3\1\100\22\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\10\0\4\3\1\334"+
    "\24\3\14\0\1\3\6\0\20\3\3\0\4\3\10\0"+
    "\1\3\1\231\27\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\10\0\6\3\1\335\22\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\10\0\21\3\1\336\7\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\10\0\4\3\1\117"+
    "\24\3\14\0\1\3\6\0\20\3\3\0\4\3\10\0"+
    "\11\3\1\210\17\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\10\0\5\3\1\206\23\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\10\0\7\3\1\256\21\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\10\0\6\3\1\337"+
    "\22\3\14\0\1\3\6\0\20\3\3\0\4\3\10\0"+
    "\1\340\30\3\14\0\1\3\6\0\20\3\3\0\4\3"+
    "\10\0\17\3\1\336\11\3\14\0\1\3\6\0\20\3"+
    "\3\0\4\3\10\0\7\3\1\334\21\3\14\0\1\3"+
    "\6\0\20\3\3\0\4\3\10\0\20\3\1\341\10\3"+
    "\14\0\1\3\6\0\20\3\3\0\4\3\10\0\15\3"+
    "\1\342\13\3\14\0\1\3\6\0\20\3\3\0\4\3"+
    "\10\0\5\3\1\343\23\3\14\0\1\3\6\0\20\3"+
    "\3\0\4\3\10\0\3\3\1\117\25\3\14\0\1\3"+
    "\6\0\20\3\3\0\4\3\10\0\3\3\1\344\25\3"+
    "\14\0\1\3\6\0\13\155\1\345\4\155\3\0\4\155"+
    "\10\0\4\155\1\345\24\155\14\0\1\155\6\0\20\3"+
    "\3\0\4\3\10\0\5\3\1\210\23\3\14\0\1\3"+
    "\6\0\20\3\3\0\4\3\10\0\12\3\1\346\16\3"+
    "\14\0\1\3\6\0\20\3\3\0\4\3\10\0\16\3"+
    "\1\117\12\3\14\0\1\3\6\0\20\3\3\0\4\3"+
    "\10\0\1\347\30\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\10\0\5\3\1\350\23\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\10\0\7\3\1\351\21\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\10\0\12\3\1\352"+
    "\16\3\14\0\1\3\6\0\20\3\3\0\4\3\10\0"+
    "\14\3\1\310\14\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\10\0\3\3\1\353\25\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\10\0\26\3\1\354\2\3\14\0"+
    "\1\3\6\0\3\155\1\355\14\155\3\0\4\155\10\0"+
    "\7\155\1\355\21\155\14\0\1\155\6\0\20\3\3\0"+
    "\4\3\10\0\26\3\1\356\2\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\10\0\5\3\1\117\23\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\10\0\12\3\1\351"+
    "\16\3\14\0\1\3\6\0\20\3\3\0\4\3\10\0"+
    "\14\3\1\265\14\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\10\0\6\3\1\357\22\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\10\0\12\3\1\102\16\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\10\0\5\3\1\360"+
    "\23\3\14\0\1\3\6\0\14\155\1\361\3\155\3\0"+
    "\4\155\10\0\2\155\1\361\26\155\14\0\1\155\6\0"+
    "\20\3\3\0\4\3\10\0\14\3\1\362\14\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\10\0\3\3\1\256"+
    "\25\3\14\0\1\3\6\0\20\3\3\0\4\3\10\0"+
    "\14\3\1\363\14\3\14\0\1\3\6\0\4\155\1\364"+
    "\13\155\3\0\4\155\10\0\12\155\1\364\16\155\14\0"+
    "\1\155\6\0\20\3\3\0\4\3\10\0\6\3\1\347"+
    "\22\3\14\0\1\3\6\0\20\3\3\0\4\3\10\0"+
    "\20\3\1\365\10\3\14\0\1\3\6\0\15\155\1\366"+
    "\2\155\3\0\4\155\10\0\3\155\1\366\25\155\14\0"+
    "\1\155\6\0\20\3\3\0\4\3\10\0\21\3\1\367"+
    "\7\3\14\0\1\3\6\0\20\155\3\0\4\155\1\0"+
    "\1\370\6\0\31\155\14\0\1\155\6\0\20\3\3\0"+
    "\4\3\10\0\15\3\1\371\13\3\14\0\1\3\113\0"+
    "\1\372\1\0\1\373\3\0\20\3\3\0\4\3\10\0"+
    "\11\3\1\374\17\3\14\0\1\3\5\0\30\372\1\0"+
    "\5\372\1\0\47\372\1\375\1\376\3\372\30\373\1\0"+
    "\5\373\1\0\50\373\1\377\1\375\2\373\1\0\20\3"+
    "\3\0\4\3\10\0\12\3\1\34\16\3\14\0\1\3"+
    "\37\0\1\u0100\60\0\30\372\1\0\5\372\1\0\47\372"+
    "\1\u0101\1\376\3\372\30\373\1\0\5\373\1\0\50\373"+
    "\1\377\1\u0102\2\373\30\372\1\0\1\372\1\u0103\3\372"+
    "\1\0\47\372\1\375\1\376\3\372\30\373\1\0\1\373"+
    "\1\u0104\3\373\1\0\50\373\1\377\1\375\2\373";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17475];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\5\11\32\1\1\11\13\1\1\0"+
    "\2\11\3\0\2\1\1\0\44\1\2\11\1\0\1\11"+
    "\1\1\1\0\1\11\3\0\4\1\1\0\3\1\1\0"+
    "\46\1\1\0\4\1\1\0\40\1\1\11\65\1\1\0"+
    "\1\1\2\0\1\1\3\0\1\11\2\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[260];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String myLexer;
public int countLine = 0;
public int chars = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 238) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { chars += yytext().length(); myLexer = yytext();return ERROR;
            }
          case 25: break;
          case 2: 
            { chars += yytext().length(); myLexer=yytext(); return CONSTANT;
            }
          case 26: break;
          case 3: 
            { chars += yytext().length(); myLexer=yytext(); return COMPOPERATOR;
            }
          case 27: break;
          case 4: 
            { chars += yytext().length(); myLexer=yytext(); return INT;
            }
          case 28: break;
          case 5: 
            { chars += yytext().length(); myLexer=yytext(); return PARENTHESIS;
            }
          case 29: break;
          case 6: 
            { chars += yytext().length(); myLexer=yytext(); return BRACKETS;
            }
          case 30: break;
          case 7: 
            { chars += yytext().length(); myLexer=yytext(); return KEYS;
            }
          case 31: break;
          case 8: 
            { chars += yytext().length(); myLexer=yytext(); return COMA;
            }
          case 32: break;
          case 9: 
            { chars += yytext().length(); myLexer=yytext(); return SEMICOLON;
            }
          case 33: break;
          case 10: 
            { chars = 0; countLine++; myLexer="\n"; return NEWLINE;
            }
          case 34: break;
          case 11: 
            { chars += yytext().length(); myLexer=yytext(); return BLANKSPACE;
            }
          case 35: break;
          case 12: 
            { chars += yytext().length(); myLexer=yytext(); return AROPERATOR;
            }
          case 36: break;
          case 13: 
            { chars += yytext().length(); myLexer=yytext(); return LOGOPERATOR;
            }
          case 37: break;
          case 14: 
            { chars += yytext().length(); myLexer=yytext(); return ASSIGNOPERATOR;
            }
          case 38: break;
          case 15: 
            { chars += yytext().length(); myLexer=yytext(); return CONCAT;
            }
          case 39: break;
          case 16: 
            { chars += yytext().length(); if(yytext().contains("\n")){chars=0; countLine++;} myLexer=yytext(); return COMMENT;
            }
          case 40: break;
          case 17: 
            { chars += yytext().length(); myLexer=yytext(); return PHP;
            }
          case 41: break;
          case 18: 
            { chars += yytext().length(); myLexer=yytext(); return DOUBLE;
            }
          case 42: break;
          case 19: 
            { chars += yytext().length(); myLexer=yytext(); return RESERVEDWORDS;
            }
          case 43: break;
          case 20: 
            { chars += yytext().length(); myLexer=yytext(); return INCDECOPERATOR;
            }
          case 44: break;
          case 21: 
            { chars += yytext().length(); myLexer=yytext(); return STRING;
            }
          case 45: break;
          case 22: 
            { chars += yytext().length(); myLexer=yytext(); return IDVAR;
            }
          case 46: break;
          case 23: 
            { chars += yytext().length(); myLexer=yytext(); return BOOL;
            }
          case 47: break;
          case 24: 
            { chars += yytext().length(); myLexer=yytext(); return DB;
            }
          case 48: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
