/* The following code was generated by JFlex 1.6.1 */

package proyectominiphp;

import static proyectominiphp.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/DELL/Desktop/ProyectoAnalizadorLexico/ProyectoMiniPHP/src/proyectominiphp/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\44\1\43\1\113\1\113\1\112\22\0\1\44\1\103\1\117"+
    "\1\122\1\120\1\102\1\104\1\115\1\35\1\35\1\100\1\76\1\41"+
    "\1\77\1\107\1\101\1\31\1\34\6\33\2\32\1\121\1\42\1\26"+
    "\1\106\1\30\1\27\1\111\1\1\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\7\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\7\1\20\1\21\1\22\1\23\1\7\1\24\1\25\1\7\1\7"+
    "\1\36\1\116\1\37\1\110\1\73\1\0\1\52\1\53\1\56\1\60"+
    "\1\62\1\66\1\72\1\45\1\64\1\7\1\75\1\50\1\47\1\57"+
    "\1\63\1\51\1\74\1\55\1\54\1\46\1\65\1\70\1\67\1\71"+
    "\1\61\1\7\1\40\1\105\1\40\1\0\6\7\1\114\172\7\u1f28\0"+
    "\1\113\1\113\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\16\2\1\3\1\4\1\3\2\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\24\2\5\15"+
    "\1\16\1\1\2\17\1\20\1\17\1\21\3\1\1\4"+
    "\1\22\4\2\1\4\6\2\1\16\4\2\2\0\1\3"+
    "\1\23\4\1\1\5\1\24\2\0\6\2\1\25\36\2"+
    "\1\26\1\17\1\15\1\0\1\16\1\0\1\24\1\0"+
    "\1\27\3\0\2\30\6\2\1\4\6\2\2\0\1\5"+
    "\2\24\1\0\1\5\41\2\1\25\13\2\1\1\1\0"+
    "\1\30\2\2\1\4\7\2\1\31\2\0\4\24\20\2"+
    "\1\25\24\2\2\0\1\22\1\30\5\2\1\0\2\24"+
    "\34\2\1\22\1\0\1\30\2\2\1\0\22\2\1\30"+
    "\1\2\1\0\1\2\1\25\5\2\1\32\4\2\1\30"+
    "\1\33\1\0\7\2\1\30\1\0\4\2\1\30\1\0"+
    "\1\2\1\30\1\34\1\2\1\0\1\2\2\0\1\2"+
    "\3\0\1\35";

  private static int [] zzUnpackAction() {
    int [] result = new int[376];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\123\0\246\0\371\0\u014c\0\u019f\0\u01f2\0\u0245"+
    "\0\u0298\0\u02eb\0\u033e\0\u0391\0\u03e4\0\u0437\0\u048a\0\u04dd"+
    "\0\u0530\0\u0583\0\u05d6\0\u0629\0\u067c\0\123\0\123\0\123"+
    "\0\123\0\123\0\u06cf\0\u0722\0\u0775\0\u07c8\0\u081b\0\u086e"+
    "\0\u08c1\0\u0914\0\u0967\0\u09ba\0\u0a0d\0\u0a60\0\u0ab3\0\u0b06"+
    "\0\u0b59\0\u0bac\0\u0bff\0\u0c52\0\u0ca5\0\u0cf8\0\u0d4b\0\u0d9e"+
    "\0\u0df1\0\u0e44\0\u0e97\0\u0eea\0\u0f3d\0\u0f90\0\u0fe3\0\u1036"+
    "\0\u1089\0\u10dc\0\u0f3d\0\123\0\u112f\0\u1182\0\u11d5\0\123"+
    "\0\u1228\0\u127b\0\u12ce\0\u1321\0\u1374\0\u0298\0\u13c7\0\u141a"+
    "\0\u146d\0\u14c0\0\u1513\0\u1566\0\u0298\0\u15b9\0\u160c\0\u165f"+
    "\0\u16b2\0\u1705\0\u1758\0\123\0\123\0\u17ab\0\u17fe\0\u1851"+
    "\0\u18a4\0\u18f7\0\u194a\0\u199d\0\u19f0\0\u1a43\0\u1a96\0\u1ae9"+
    "\0\u1b3c\0\u1b8f\0\u1be2\0\u0298\0\u1c35\0\u1c88\0\u1cdb\0\u1d2e"+
    "\0\u1d81\0\u1dd4\0\u1e27\0\u1e7a\0\u1ecd\0\u1f20\0\u1f73\0\u1fc6"+
    "\0\u2019\0\u206c\0\u20bf\0\u2112\0\u2165\0\u21b8\0\u220b\0\u225e"+
    "\0\u22b1\0\u2304\0\u2357\0\u23aa\0\u23fd\0\u2450\0\u24a3\0\u24f6"+
    "\0\u2549\0\u259c\0\123\0\123\0\123\0\u25ef\0\123\0\u2642"+
    "\0\u2695\0\u112f\0\123\0\u26e8\0\u1182\0\u273b\0\u278e\0\u27e1"+
    "\0\u2834\0\u2887\0\u28da\0\u292d\0\u2980\0\u29d3\0\u2a26\0\u2a79"+
    "\0\u2acc\0\u2b1f\0\u2b72\0\u2bc5\0\u2c18\0\u2c6b\0\u2cbe\0\u2d11"+
    "\0\u2d64\0\u2db7\0\u2e0a\0\u2e5d\0\u2eb0\0\u2f03\0\u2f56\0\u2fa9"+
    "\0\u2ffc\0\u304f\0\u30a2\0\u30f5\0\u3148\0\u319b\0\u31ee\0\u3241"+
    "\0\u3294\0\u32e7\0\u333a\0\u338d\0\u33e0\0\u3433\0\u3486\0\u34d9"+
    "\0\u352c\0\u357f\0\u35d2\0\u3625\0\u3678\0\u36cb\0\u371e\0\u3771"+
    "\0\u37c4\0\u3817\0\u386a\0\u38bd\0\u3910\0\u3963\0\u39b6\0\u3a09"+
    "\0\u3a5c\0\u3aaf\0\u3b02\0\u3b55\0\u3ba8\0\u3bfb\0\u3c4e\0\u3ca1"+
    "\0\u3cf4\0\u3d47\0\u3d9a\0\u3ded\0\u3e40\0\u3e93\0\u3ee6\0\u3f39"+
    "\0\u3f8c\0\u3fdf\0\u4032\0\u4085\0\u40d8\0\u412b\0\u0298\0\u417e"+
    "\0\u41d1\0\u4224\0\u4277\0\u42ca\0\u431d\0\u4370\0\u43c3\0\u4416"+
    "\0\u4469\0\u44bc\0\u450f\0\u4562\0\u45b5\0\u4608\0\u465b\0\u46ae"+
    "\0\u4701\0\u4754\0\u47a7\0\u47fa\0\u484d\0\u48a0\0\u48f3\0\u4946"+
    "\0\u4999\0\u49ec\0\u4a3f\0\u4a92\0\u4ae5\0\u4b38\0\u4b8b\0\u4bde"+
    "\0\u4c31\0\u4c84\0\u4cd7\0\u4d2a\0\u4d7d\0\u4dd0\0\u4e23\0\u4e76"+
    "\0\u4ec9\0\u4f1c\0\u3d47\0\u4f6f\0\u4fc2\0\u5015\0\u5068\0\u50bb"+
    "\0\u510e\0\u5161\0\u51b4\0\u5207\0\u525a\0\u52ad\0\u5300\0\u5353"+
    "\0\u53a6\0\u53f9\0\u544c\0\u549f\0\u54f2\0\u5545\0\u5598\0\u55eb"+
    "\0\u563e\0\u5691\0\u56e4\0\u5737\0\u578a\0\u57dd\0\u5830\0\u5883"+
    "\0\u58d6\0\u5929\0\u597c\0\u59cf\0\u5a22\0\u5a75\0\u5ac8\0\u5b1b"+
    "\0\u5b6e\0\u5bc1\0\123\0\u4fc2\0\u5c14\0\u5c67\0\u5cba\0\u5d0d"+
    "\0\u5d60\0\u5db3\0\u5e06\0\u5e59\0\u5eac\0\u5eff\0\u5f52\0\u5fa5"+
    "\0\u5ff8\0\u604b\0\u609e\0\u60f1\0\u6144\0\u6197\0\u61ea\0\u623d"+
    "\0\u6290\0\u62e3\0\u6336\0\u6389\0\u63dc\0\u642f\0\u6482\0\u64d5"+
    "\0\u6528\0\u657b\0\u65ce\0\u6621\0\u0298\0\u6674\0\u66c7\0\u671a"+
    "\0\u676d\0\u67c0\0\u0298\0\u6813\0\u6866\0\u68b9\0\u690c\0\u695f"+
    "\0\u69b2\0\u6a05\0\u6a58\0\u6aab\0\u6afe\0\u6b51\0\u6ba4\0\u6bf7"+
    "\0\u6c4a\0\u6c9d\0\u6cf0\0\u6d43\0\u6d96\0\123\0\u6de9\0\u6e3c"+
    "\0\u6e8f\0\u6ee2\0\u6f35\0\u6f88\0\u6fdb\0\u702e\0\u7081\0\123";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[376];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11"+
    "\1\12\4\11\1\13\1\11\1\14\1\15\1\16\1\11"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\3\25\1\26"+
    "\2\27\1\30\1\31\1\32\1\33\1\34\1\11\1\35"+
    "\1\11\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\11\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\2\11\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\34\1\0\1\11\1\75\1\2\1\76"+
    "\1\77\1\100\1\101\124\0\14\11\1\102\10\11\3\0"+
    "\4\11\10\0\12\11\1\102\16\11\16\0\1\11\7\0"+
    "\17\11\1\103\5\11\3\0\4\11\10\0\10\11\1\103"+
    "\20\11\16\0\1\11\7\0\1\104\14\11\1\105\7\11"+
    "\3\0\4\11\10\0\5\11\1\104\10\11\1\105\12\11"+
    "\16\0\1\11\7\0\15\11\1\106\7\11\3\0\4\11"+
    "\10\0\16\11\1\106\12\11\16\0\1\11\7\0\12\11"+
    "\1\107\1\11\1\110\10\11\3\0\4\11\10\0\3\11"+
    "\1\107\6\11\1\110\16\11\16\0\1\11\7\0\1\111"+
    "\14\11\1\112\4\11\1\113\2\11\3\0\4\11\10\0"+
    "\5\11\1\111\10\11\1\112\1\11\1\113\10\11\16\0"+
    "\1\11\7\0\25\11\3\0\4\11\10\0\31\11\16\0"+
    "\1\11\7\0\5\11\1\106\6\11\1\114\10\11\3\0"+
    "\4\11\10\0\12\11\1\114\6\11\1\106\7\11\16\0"+
    "\1\11\7\0\17\11\1\115\5\11\3\0\4\11\10\0"+
    "\10\11\1\115\20\11\16\0\1\11\7\0\4\11\1\116"+
    "\20\11\3\0\4\11\10\0\15\11\1\116\13\11\16\0"+
    "\1\11\7\0\23\11\1\117\1\11\3\0\4\11\10\0"+
    "\22\11\1\117\6\11\16\0\1\11\7\0\17\11\1\120"+
    "\5\11\3\0\4\11\10\0\10\11\1\120\20\11\16\0"+
    "\1\11\7\0\7\11\1\121\15\11\3\0\4\11\10\0"+
    "\1\121\30\11\16\0\1\11\7\0\15\11\1\13\7\11"+
    "\3\0\4\11\10\0\16\11\1\13\12\11\16\0\1\11"+
    "\34\0\1\73\1\122\15\0\1\123\40\0\1\124\44\0"+
    "\1\125\122\0\1\73\55\0\1\124\15\0\1\126\1\127"+
    "\2\126\1\130\17\126\1\131\3\0\1\132\1\133\2\132"+
    "\10\0\6\126\1\127\6\126\1\130\6\126\1\131\4\126"+
    "\11\0\1\134\4\0\1\126\3\0\1\135\3\0\4\126"+
    "\1\130\20\126\3\0\4\25\10\0\15\126\1\130\13\126"+
    "\11\0\1\134\4\0\1\126\3\0\1\135\45\0\1\33"+
    "\123\0\1\34\45\0\1\34\11\0\17\11\1\120\5\11"+
    "\3\0\4\11\10\0\1\136\7\11\1\137\20\11\16\0"+
    "\1\11\7\0\25\11\3\0\4\11\10\0\17\11\1\140"+
    "\11\11\16\0\1\11\7\0\25\11\3\0\4\11\10\0"+
    "\10\11\1\141\7\11\1\142\10\11\16\0\1\11\7\0"+
    "\14\11\1\102\10\11\3\0\4\11\10\0\6\11\1\143"+
    "\1\144\1\145\1\11\1\146\16\11\16\0\1\11\7\0"+
    "\17\11\1\103\5\11\3\0\4\11\10\0\10\11\1\147"+
    "\20\11\16\0\1\11\7\0\23\11\1\117\1\11\3\0"+
    "\4\11\10\0\1\11\1\150\20\11\1\151\6\11\16\0"+
    "\1\11\7\0\4\11\1\116\20\11\3\0\4\11\10\0"+
    "\15\11\1\152\13\11\16\0\1\11\7\0\1\104\14\11"+
    "\1\105\7\11\3\0\4\11\10\0\3\11\1\153\1\11"+
    "\1\154\10\11\1\155\12\11\16\0\1\11\7\0\25\11"+
    "\3\0\4\11\10\0\5\11\1\156\7\11\1\157\13\11"+
    "\16\0\1\11\7\0\15\11\1\106\7\11\3\0\4\11"+
    "\10\0\15\11\1\160\1\144\1\161\11\11\16\0\1\11"+
    "\7\0\12\11\1\107\1\11\1\110\10\11\3\0\4\11"+
    "\10\0\2\11\1\162\1\163\5\11\1\164\1\165\10\11"+
    "\1\166\1\167\4\11\16\0\1\11\7\0\17\11\1\115"+
    "\5\11\3\0\4\11\10\0\10\11\1\144\20\11\16\0"+
    "\1\11\7\0\5\11\1\106\6\11\1\114\10\11\3\0"+
    "\4\11\10\0\2\11\1\170\4\11\1\171\2\11\1\172"+
    "\6\11\1\144\7\11\16\0\1\11\7\0\25\11\3\0"+
    "\4\11\10\0\7\11\1\161\2\11\1\171\16\11\16\0"+
    "\1\11\7\0\1\111\14\11\1\112\4\11\1\113\2\11"+
    "\3\0\4\11\10\0\5\11\1\111\10\11\1\173\1\174"+
    "\1\175\10\11\16\0\1\11\7\0\7\11\1\121\15\11"+
    "\3\0\4\11\10\0\1\176\30\11\16\0\1\11\7\0"+
    "\25\11\3\0\4\11\10\0\5\11\1\177\23\11\16\0"+
    "\1\11\7\0\15\11\1\13\7\11\3\0\4\11\10\0"+
    "\16\11\1\50\12\11\16\0\1\11\7\0\25\11\3\0"+
    "\4\11\10\0\3\11\1\200\12\11\1\201\12\11\16\0"+
    "\1\11\7\0\25\11\3\0\4\11\10\0\26\11\1\202"+
    "\2\11\16\0\1\11\37\0\1\24\3\25\41\0\1\203"+
    "\7\0\1\204\1\134\44\0\1\24\3\25\42\0\1\203"+
    "\6\0\1\204\1\134\113\0\1\205\5\0\1\204\114\0"+
    "\1\206\1\101\4\0\1\204\122\0\1\204\122\0\1\124"+
    "\120\0\1\207\1\0\1\204\121\0\1\207\1\204\117\0"+
    "\1\210\2\0\1\124\45\0\4\211\51\0\1\204\14\0"+
    "\43\212\1\0\51\212\1\213\1\214\4\212\116\215\1\216"+
    "\1\213\3\215\1\0\17\217\1\220\5\217\17\0\10\217"+
    "\1\220\20\217\16\0\1\217\6\0\43\101\1\0\46\101"+
    "\3\0\6\101\1\0\3\11\1\115\21\11\3\0\4\11"+
    "\10\0\13\11\1\115\15\11\16\0\1\11\7\0\4\11"+
    "\1\221\20\11\3\0\4\11\10\0\15\11\1\221\13\11"+
    "\16\0\1\11\7\0\20\11\1\222\4\11\3\0\4\11"+
    "\10\0\7\11\1\222\21\11\16\0\1\11\7\0\14\11"+
    "\1\223\10\11\3\0\4\11\10\0\12\11\1\223\16\11"+
    "\16\0\1\11\7\0\20\11\1\224\4\11\3\0\4\11"+
    "\10\0\7\11\1\224\21\11\16\0\1\11\7\0\3\11"+
    "\1\225\21\11\3\0\4\11\10\0\13\11\1\225\15\11"+
    "\16\0\1\11\7\0\12\11\1\226\12\11\3\0\4\11"+
    "\10\0\3\11\1\226\25\11\16\0\1\11\7\0\17\11"+
    "\1\227\5\11\3\0\4\11\10\0\10\11\1\227\20\11"+
    "\16\0\1\11\7\0\14\11\1\230\10\11\3\0\4\11"+
    "\10\0\12\11\1\230\16\11\16\0\1\11\7\0\2\11"+
    "\1\231\22\11\3\0\4\11\10\0\11\11\1\231\17\11"+
    "\16\0\1\11\7\0\21\11\1\232\3\11\3\0\4\11"+
    "\10\0\1\11\1\232\27\11\16\0\1\11\7\0\10\11"+
    "\1\233\14\11\3\0\4\11\10\0\17\11\1\233\11\11"+
    "\16\0\1\11\7\0\22\11\1\234\2\11\3\0\4\11"+
    "\10\0\20\11\1\234\10\11\16\0\1\11\7\0\10\11"+
    "\1\235\14\11\3\0\4\11\10\0\17\11\1\235\11\11"+
    "\16\0\1\11\25\0\1\236\31\0\1\236\117\0\1\237"+
    "\55\0\25\126\3\0\4\126\10\0\31\126\16\0\1\126"+
    "\7\0\25\126\3\0\1\240\2\126\1\240\10\0\31\126"+
    "\16\0\1\126\7\0\25\126\3\0\1\241\3\242\10\0"+
    "\31\126\2\243\14\0\1\126\7\0\6\244\17\126\3\0"+
    "\4\244\10\0\5\126\2\244\2\126\1\244\1\126\1\244"+
    "\1\126\1\244\3\126\1\244\7\126\16\0\1\126\7\0"+
    "\4\126\1\130\20\126\3\0\1\132\1\133\2\132\10\0"+
    "\15\126\1\130\13\126\11\0\1\134\4\0\1\126\3\0"+
    "\1\135\3\0\4\126\1\130\20\126\3\0\4\133\10\0"+
    "\15\126\1\130\13\126\11\0\1\134\4\0\1\126\3\0"+
    "\1\135\33\0\4\211\67\0\25\126\17\0\31\126\16\0"+
    "\1\126\7\0\25\11\3\0\4\11\10\0\10\11\1\245"+
    "\20\11\16\0\1\11\7\0\22\11\1\234\2\11\3\0"+
    "\4\11\10\0\5\11\1\246\6\11\1\144\3\11\1\234"+
    "\10\11\16\0\1\11\7\0\25\11\3\0\4\11\10\0"+
    "\7\11\1\247\21\11\16\0\1\11\7\0\25\11\3\0"+
    "\4\11\10\0\16\11\1\250\1\251\11\11\16\0\1\11"+
    "\7\0\25\11\3\0\4\11\10\0\6\11\1\252\22\11"+
    "\16\0\1\11\7\0\25\11\3\0\4\11\10\0\7\11"+
    "\1\253\21\11\16\0\1\11\7\0\25\11\3\0\4\11"+
    "\10\0\10\11\1\254\20\11\16\0\1\11\7\0\3\11"+
    "\1\115\21\11\3\0\4\11\10\0\13\11\1\144\15\11"+
    "\16\0\1\11\7\0\4\11\1\221\20\11\3\0\4\11"+
    "\10\0\15\11\1\255\13\11\16\0\1\11\7\0\25\11"+
    "\3\0\4\11\10\0\5\11\1\256\23\11\16\0\1\11"+
    "\7\0\10\11\1\233\14\11\3\0\4\11\10\0\17\11"+
    "\1\257\11\11\16\0\1\11\7\0\21\11\1\232\3\11"+
    "\3\0\4\11\10\0\1\11\1\260\25\11\1\261\1\11"+
    "\16\0\1\11\7\0\25\11\3\0\4\11\10\0\5\11"+
    "\1\262\10\11\1\263\12\11\16\0\1\11\7\0\20\11"+
    "\1\222\4\11\3\0\4\11\10\0\1\11\1\264\1\11"+
    "\1\265\3\11\1\266\21\11\16\0\1\11\7\0\14\11"+
    "\1\223\10\11\3\0\4\11\10\0\12\11\1\267\16\11"+
    "\16\0\1\11\7\0\25\11\3\0\4\11\10\0\2\11"+
    "\1\270\26\11\16\0\1\11\7\0\25\11\3\0\4\11"+
    "\10\0\22\11\1\144\6\11\16\0\1\11\7\0\25\11"+
    "\3\0\4\11\10\0\11\11\1\271\7\11\1\272\7\11"+
    "\16\0\1\11\7\0\25\11\3\0\4\11\10\0\15\11"+
    "\1\144\13\11\16\0\1\11\7\0\25\11\3\0\4\11"+
    "\10\0\4\11\1\273\24\11\16\0\1\11\7\0\20\11"+
    "\1\224\4\11\3\0\4\11\10\0\7\11\1\274\21\11"+
    "\16\0\1\11\7\0\25\11\3\0\4\11\10\0\1\275"+
    "\30\11\16\0\1\11\7\0\3\11\1\225\21\11\3\0"+
    "\4\11\10\0\13\11\1\276\15\11\16\0\1\11\7\0"+
    "\25\11\3\0\4\11\10\0\5\11\1\277\23\11\16\0"+
    "\1\11\7\0\25\11\3\0\4\11\10\0\1\11\1\300"+
    "\15\11\1\247\11\11\16\0\1\11\7\0\25\11\3\0"+
    "\4\11\10\0\4\11\1\301\24\11\16\0\1\11\7\0"+
    "\25\11\3\0\4\11\10\0\7\11\1\302\21\11\16\0"+
    "\1\11\7\0\2\11\1\231\22\11\3\0\4\11\10\0"+
    "\1\11\1\303\5\11\1\304\1\11\1\305\17\11\16\0"+
    "\1\11\7\0\17\11\1\227\5\11\3\0\4\11\10\0"+
    "\10\11\1\306\20\11\16\0\1\11\7\0\25\11\3\0"+
    "\4\11\10\0\12\11\1\166\16\11\16\0\1\11\7\0"+
    "\14\11\1\230\10\11\3\0\4\11\10\0\12\11\1\307"+
    "\16\11\16\0\1\11\7\0\10\11\1\235\14\11\3\0"+
    "\4\11\10\0\17\11\1\310\11\11\16\0\1\11\7\0"+
    "\25\11\3\0\4\11\10\0\10\11\1\144\20\11\16\0"+
    "\1\11\7\0\25\11\3\0\4\11\10\0\16\11\1\311"+
    "\12\11\16\0\1\11\7\0\25\11\3\0\4\11\10\0"+
    "\1\11\1\275\27\11\16\0\1\11\7\0\2\11\1\312"+
    "\1\313\1\11\1\314\4\11\1\315\1\316\1\317\4\11"+
    "\1\320\3\11\3\0\4\11\10\0\1\321\30\11\16\0"+
    "\1\11\6\0\43\206\1\322\34\206\1\323\22\206\106\0"+
    "\1\2\15\0\4\126\1\130\20\126\3\0\4\211\10\0"+
    "\15\126\1\130\13\126\16\0\1\126\3\0\1\135\2\0"+
    "\43\212\1\0\46\212\3\0\6\212\43\215\1\0\46\215"+
    "\3\0\6\215\1\0\25\217\3\0\4\217\10\0\31\217"+
    "\16\0\1\217\7\0\4\217\1\324\20\217\3\0\4\217"+
    "\10\0\15\217\1\324\13\217\16\0\1\217\7\0\1\325"+
    "\24\11\3\0\4\11\10\0\5\11\1\325\23\11\16\0"+
    "\1\11\7\0\4\11\1\106\20\11\3\0\4\11\10\0"+
    "\15\11\1\106\13\11\16\0\1\11\7\0\21\11\1\326"+
    "\3\11\3\0\4\11\10\0\1\11\1\326\27\11\16\0"+
    "\1\11\7\0\4\11\1\327\20\11\3\0\4\11\10\0"+
    "\15\11\1\327\13\11\16\0\1\11\7\0\5\11\1\330"+
    "\2\11\1\331\7\11\1\15\2\11\1\17\1\11\3\0"+
    "\4\11\10\0\7\11\1\15\7\11\1\331\1\11\1\330"+
    "\1\17\6\11\16\0\1\11\7\0\20\11\1\234\4\11"+
    "\3\0\4\11\10\0\7\11\1\234\21\11\16\0\1\11"+
    "\7\0\4\11\1\332\20\11\3\0\4\11\10\0\15\11"+
    "\1\332\13\11\16\0\1\11\7\0\2\11\1\333\22\11"+
    "\3\0\4\11\10\0\11\11\1\333\17\11\16\0\1\11"+
    "\7\0\12\11\1\334\12\11\3\0\4\11\10\0\3\11"+
    "\1\334\25\11\16\0\1\11\7\0\22\11\1\335\2\11"+
    "\3\0\4\11\10\0\20\11\1\335\10\11\16\0\1\11"+
    "\7\0\21\11\1\336\3\11\3\0\4\11\10\0\1\11"+
    "\1\336\27\11\16\0\1\11\7\0\4\11\1\337\20\11"+
    "\3\0\4\11\10\0\15\11\1\337\13\11\16\0\1\11"+
    "\7\0\12\11\1\222\12\11\3\0\4\11\10\0\3\11"+
    "\1\222\25\11\16\0\1\11\16\0\1\340\34\0\1\340"+
    "\124\0\1\341\54\0\25\126\3\0\1\240\2\126\1\240"+
    "\10\0\31\126\16\0\1\126\3\0\1\135\2\0\2\342"+
    "\1\343\22\342\1\344\3\342\1\345\1\342\2\345\6\342"+
    "\1\0\7\342\1\343\15\342\1\344\20\342\2\0\1\126"+
    "\37\342\4\242\6\342\1\0\46\342\2\0\1\126\6\342"+
    "\31\0\1\241\3\242\67\0\6\244\17\126\3\0\4\244"+
    "\10\0\5\126\2\244\2\126\1\244\1\126\1\244\1\126"+
    "\1\244\3\126\1\244\7\126\16\0\1\126\3\0\1\135"+
    "\3\0\25\11\3\0\4\11\10\0\16\11\1\157\12\11"+
    "\16\0\1\11\7\0\25\11\3\0\4\11\10\0\17\11"+
    "\1\247\11\11\16\0\1\11\7\0\25\11\3\0\4\11"+
    "\10\0\1\11\1\144\27\11\16\0\1\11\7\0\25\11"+
    "\3\0\4\11\10\0\1\11\1\346\27\11\16\0\1\11"+
    "\7\0\25\11\3\0\4\11\10\0\12\11\1\247\10\11"+
    "\1\347\5\11\16\0\1\11\7\0\25\11\3\0\4\11"+
    "\10\0\3\11\1\350\25\11\16\0\1\11\7\0\25\11"+
    "\3\0\4\11\10\0\1\11\1\351\27\11\16\0\1\11"+
    "\7\0\25\11\3\0\4\11\10\0\5\11\1\352\23\11"+
    "\16\0\1\11\7\0\1\325\24\11\3\0\4\11\10\0"+
    "\5\11\1\353\23\11\16\0\1\11\7\0\25\11\3\0"+
    "\4\11\10\0\1\11\1\350\27\11\16\0\1\11\7\0"+
    "\21\11\1\336\3\11\3\0\4\11\10\0\1\11\1\354"+
    "\27\11\16\0\1\11\7\0\22\11\1\335\2\11\3\0"+
    "\4\11\10\0\20\11\1\355\10\11\16\0\1\11\7\0"+
    "\25\11\3\0\4\11\10\0\20\11\1\356\10\11\16\0"+
    "\1\11\7\0\25\11\3\0\4\11\10\0\7\11\1\357"+
    "\21\11\16\0\1\11\7\0\25\11\3\0\4\11\10\0"+
    "\12\11\1\161\16\11\16\0\1\11\7\0\25\11\3\0"+
    "\4\11\10\0\11\11\1\360\17\11\16\0\1\11\7\0"+
    "\25\11\3\0\4\11\10\0\3\11\1\361\25\11\16\0"+
    "\1\11\7\0\4\11\1\106\20\11\3\0\4\11\10\0"+
    "\15\11\1\144\13\11\16\0\1\11\7\0\21\11\1\326"+
    "\3\11\3\0\4\11\10\0\1\11\1\362\5\11\1\247"+
    "\21\11\16\0\1\11\7\0\25\11\3\0\4\11\10\0"+
    "\15\11\1\363\13\11\16\0\1\11\7\0\25\11\3\0"+
    "\4\11\10\0\3\11\1\364\25\11\16\0\1\11\7\0"+
    "\25\11\3\0\4\11\10\0\5\11\1\365\23\11\16\0"+
    "\1\11\7\0\25\11\3\0\4\11\10\0\1\11\1\352"+
    "\27\11\16\0\1\11\7\0\4\11\1\327\20\11\3\0"+
    "\4\11\10\0\15\11\1\366\13\11\16\0\1\11\7\0"+
    "\25\11\3\0\4\11\10\0\16\11\1\144\12\11\16\0"+
    "\1\11\7\0\5\11\1\330\2\11\1\331\7\11\1\15"+
    "\2\11\1\17\1\11\3\0\4\11\10\0\7\11\1\367"+
    "\3\11\1\370\3\11\1\371\1\11\1\372\1\54\6\11"+
    "\16\0\1\11\7\0\25\11\3\0\4\11\10\0\3\11"+
    "\1\144\25\11\16\0\1\11\7\0\25\11\3\0\4\11"+
    "\10\0\15\11\1\373\13\11\16\0\1\11\7\0\25\11"+
    "\3\0\4\11\10\0\3\11\1\374\25\11\16\0\1\11"+
    "\7\0\25\11\3\0\4\11\10\0\15\11\1\247\13\11"+
    "\16\0\1\11\7\0\25\11\3\0\4\11\10\0\15\11"+
    "\1\375\13\11\16\0\1\11\7\0\25\11\3\0\4\11"+
    "\10\0\1\11\1\376\27\11\16\0\1\11\7\0\12\11"+
    "\1\334\12\11\3\0\4\11\10\0\3\11\1\377\25\11"+
    "\16\0\1\11\7\0\4\11\1\332\20\11\3\0\4\11"+
    "\10\0\15\11\1\u0100\13\11\16\0\1\11\7\0\2\11"+
    "\1\333\22\11\3\0\4\11\10\0\11\11\1\u0101\17\11"+
    "\16\0\1\11\7\0\12\11\1\222\12\11\3\0\4\11"+
    "\10\0\3\11\1\266\25\11\16\0\1\11\7\0\25\11"+
    "\3\0\4\11\10\0\6\11\1\166\22\11\16\0\1\11"+
    "\7\0\12\11\1\u0102\12\11\3\0\4\11\10\0\31\11"+
    "\16\0\1\11\7\0\10\11\1\u0103\14\11\3\0\4\11"+
    "\10\0\31\11\16\0\1\11\7\0\10\11\1\u0104\11\11"+
    "\1\u0105\2\11\3\0\4\11\10\0\31\11\16\0\1\11"+
    "\7\0\10\11\1\u0106\14\11\3\0\4\11\10\0\31\11"+
    "\16\0\1\11\7\0\4\11\1\u0107\20\11\3\0\4\11"+
    "\10\0\31\11\16\0\1\11\7\0\1\u0108\24\11\3\0"+
    "\4\11\10\0\31\11\16\0\1\11\7\0\17\11\1\u0109"+
    "\5\11\3\0\4\11\10\0\31\11\16\0\1\11\7\0"+
    "\25\11\3\0\4\11\10\0\5\11\1\u010a\23\11\16\0"+
    "\1\11\6\0\100\u010b\1\u010c\22\u010b\43\206\1\322\34\206"+
    "\1\323\1\u010d\21\206\1\0\2\217\1\u010e\22\217\3\0"+
    "\4\217\10\0\11\217\1\u010e\17\217\16\0\1\217\7\0"+
    "\11\11\1\106\13\11\3\0\4\11\10\0\30\11\1\106"+
    "\16\0\1\11\7\0\10\11\1\u010f\14\11\3\0\4\11"+
    "\10\0\17\11\1\u010f\11\11\16\0\1\11\7\0\10\11"+
    "\1\331\14\11\3\0\4\11\10\0\17\11\1\331\11\11"+
    "\16\0\1\11\7\0\15\11\1\112\7\11\3\0\4\11"+
    "\10\0\16\11\1\112\12\11\16\0\1\11\7\0\5\11"+
    "\1\106\17\11\3\0\4\11\10\0\21\11\1\106\7\11"+
    "\16\0\1\11\7\0\1\336\24\11\3\0\4\11\10\0"+
    "\5\11\1\336\23\11\16\0\1\11\7\0\21\11\1\u0110"+
    "\3\11\3\0\4\11\10\0\1\11\1\u0110\27\11\16\0"+
    "\1\11\7\0\22\11\1\u0111\2\11\3\0\4\11\10\0"+
    "\20\11\1\u0111\10\11\16\0\1\11\7\0\17\11\1\u0112"+
    "\5\11\3\0\4\11\10\0\10\11\1\u0112\20\11\16\0"+
    "\1\11\7\0\2\11\1\u0113\22\11\3\0\4\11\10\0"+
    "\11\11\1\u0113\17\11\16\0\1\11\25\0\1\125\31\0"+
    "\1\125\121\0\1\u0114\53\0\25\126\3\0\4\342\10\0"+
    "\31\126\16\0\1\126\3\0\1\135\3\0\25\126\3\0"+
    "\1\u0115\2\342\1\u0115\10\0\31\126\16\0\1\126\3\0"+
    "\1\135\3\0\6\u0116\17\126\3\0\4\u0116\10\0\5\126"+
    "\2\u0116\2\126\1\u0116\1\126\1\u0116\1\126\1\u0116\3\126"+
    "\1\u0116\7\126\16\0\1\126\3\0\1\135\2\0\31\342"+
    "\1\345\1\342\2\345\6\342\1\0\46\342\2\0\1\126"+
    "\6\342\1\0\25\11\3\0\4\11\10\0\15\11\1\u0117"+
    "\13\11\16\0\1\11\7\0\25\11\3\0\4\11\10\0"+
    "\5\11\1\u0118\23\11\16\0\1\11\7\0\25\11\3\0"+
    "\4\11\10\0\17\11\1\u0119\11\11\16\0\1\11\7\0"+
    "\25\11\3\0\4\11\10\0\10\11\1\u011a\20\11\16\0"+
    "\1\11\7\0\25\11\3\0\4\11\10\0\14\11\1\144"+
    "\14\11\16\0\1\11\7\0\11\11\1\106\13\11\3\0"+
    "\4\11\10\0\30\11\1\144\16\0\1\11\7\0\2\11"+
    "\1\u0113\22\11\3\0\4\11\10\0\11\11\1\u011b\17\11"+
    "\16\0\1\11\7\0\17\11\1\u0112\5\11\3\0\4\11"+
    "\10\0\10\11\1\u011c\20\11\16\0\1\11\7\0\25\11"+
    "\3\0\4\11\10\0\17\11\1\u011d\11\11\16\0\1\11"+
    "\7\0\25\11\3\0\4\11\10\0\7\11\1\144\21\11"+
    "\16\0\1\11\7\0\25\11\3\0\4\11\10\0\1\144"+
    "\30\11\16\0\1\11\7\0\25\11\3\0\4\11\10\0"+
    "\5\11\1\u011e\23\11\16\0\1\11\7\0\10\11\1\u010f"+
    "\14\11\3\0\4\11\10\0\17\11\1\u011f\11\11\16\0"+
    "\1\11\7\0\25\11\3\0\4\11\10\0\7\11\1\u0120"+
    "\21\11\16\0\1\11\7\0\25\11\3\0\4\11\10\0"+
    "\5\11\1\u0121\23\11\16\0\1\11\7\0\25\11\3\0"+
    "\4\11\10\0\20\11\1\u0122\10\11\16\0\1\11\7\0"+
    "\10\11\1\331\14\11\3\0\4\11\10\0\17\11\1\371"+
    "\11\11\16\0\1\11\7\0\23\11\1\117\1\11\3\0"+
    "\4\11\10\0\22\11\1\151\6\11\16\0\1\11\7\0"+
    "\25\11\3\0\4\11\10\0\15\11\1\u0123\13\11\16\0"+
    "\1\11\7\0\5\11\1\106\17\11\3\0\4\11\10\0"+
    "\21\11\1\144\7\11\16\0\1\11\7\0\15\11\1\112"+
    "\7\11\3\0\4\11\10\0\16\11\1\173\12\11\16\0"+
    "\1\11\7\0\25\11\3\0\4\11\10\0\12\11\1\u0124"+
    "\16\11\16\0\1\11\7\0\25\11\3\0\4\11\10\0"+
    "\15\11\1\u0125\13\11\16\0\1\11\7\0\25\11\3\0"+
    "\4\11\10\0\10\11\1\u0126\20\11\16\0\1\11\7\0"+
    "\25\11\3\0\4\11\10\0\5\11\1\u0127\7\11\1\u0128"+
    "\13\11\16\0\1\11\7\0\22\11\1\u0111\2\11\3\0"+
    "\4\11\10\0\20\11\1\u0129\10\11\16\0\1\11\7\0"+
    "\1\336\24\11\3\0\4\11\10\0\5\11\1\354\23\11"+
    "\16\0\1\11\7\0\21\11\1\u0110\3\11\3\0\4\11"+
    "\10\0\1\11\1\u012a\27\11\16\0\1\11\7\0\1\u012b"+
    "\24\11\3\0\4\11\10\0\31\11\16\0\1\11\7\0"+
    "\17\11\1\u012c\5\11\3\0\4\11\10\0\31\11\16\0"+
    "\1\11\7\0\12\11\1\u012d\12\11\3\0\4\11\10\0"+
    "\31\11\16\0\1\11\7\0\14\11\1\u012e\10\11\3\0"+
    "\4\11\10\0\31\11\16\0\1\11\7\0\14\11\1\u012d"+
    "\10\11\3\0\4\11\10\0\31\11\16\0\1\11\7\0"+
    "\21\11\1\u012f\3\11\3\0\4\11\10\0\31\11\16\0"+
    "\1\11\7\0\13\11\1\u0130\11\11\3\0\4\11\10\0"+
    "\31\11\16\0\1\11\7\0\1\u0131\24\11\3\0\4\11"+
    "\10\0\31\11\16\0\1\11\7\0\25\11\3\0\4\11"+
    "\10\0\3\11\1\u0132\25\11\16\0\1\11\6\0\100\u010b"+
    "\1\u010c\1\u0133\21\u010b\43\u0134\1\2\57\u0134\1\0\15\217"+
    "\1\u0135\7\217\3\0\4\217\10\0\16\217\1\u0135\12\217"+
    "\16\0\1\217\7\0\14\11\1\u0136\10\11\3\0\4\11"+
    "\10\0\12\11\1\u0136\16\11\16\0\1\11\7\0\10\11"+
    "\1\u0137\14\11\3\0\4\11\10\0\17\11\1\u0137\11\11"+
    "\16\0\1\11\7\0\3\11\1\222\21\11\3\0\4\11"+
    "\10\0\13\11\1\222\15\11\16\0\1\11\7\0\14\11"+
    "\1\106\10\11\3\0\4\11\10\0\12\11\1\106\16\11"+
    "\16\0\1\11\7\0\7\11\1\106\15\11\3\0\4\11"+
    "\10\0\1\106\30\11\16\0\1\11\36\0\1\u0138\72\0"+
    "\31\342\1\u0115\2\342\1\u0115\6\342\1\0\46\342\2\0"+
    "\1\126\7\342\6\u0116\22\342\4\u0116\6\342\1\0\6\342"+
    "\2\u0116\2\342\1\u0116\1\342\1\u0116\1\342\1\u0116\3\342"+
    "\1\u0116\23\342\2\0\1\126\6\342\1\0\25\11\3\0"+
    "\4\11\10\0\11\11\1\u0139\17\11\16\0\1\11\7\0"+
    "\25\11\3\0\4\11\10\0\1\11\1\161\27\11\16\0"+
    "\1\11\7\0\25\11\3\0\4\11\10\0\11\11\1\144"+
    "\17\11\16\0\1\11\7\0\25\11\3\0\4\11\10\0"+
    "\5\11\1\u013a\23\11\16\0\1\11\7\0\7\11\1\106"+
    "\15\11\3\0\4\11\10\0\1\144\30\11\16\0\1\11"+
    "\7\0\14\11\1\106\10\11\3\0\4\11\10\0\12\11"+
    "\1\144\16\11\16\0\1\11\7\0\25\11\3\0\4\11"+
    "\10\0\10\11\1\u013b\20\11\16\0\1\11\7\0\25\11"+
    "\3\0\4\11\10\0\6\11\1\u013c\22\11\16\0\1\11"+
    "\7\0\14\11\1\u0136\10\11\3\0\4\11\10\0\12\11"+
    "\1\u013d\16\11\16\0\1\11\7\0\25\11\3\0\4\11"+
    "\10\0\4\11\1\u013e\24\11\16\0\1\11\7\0\25\11"+
    "\3\0\4\11\10\0\10\11\1\161\20\11\16\0\1\11"+
    "\7\0\25\11\3\0\4\11\10\0\3\11\1\247\25\11"+
    "\16\0\1\11\7\0\25\11\3\0\4\11\10\0\11\11"+
    "\1\271\17\11\16\0\1\11\7\0\25\11\3\0\4\11"+
    "\10\0\13\11\1\357\15\11\16\0\1\11\7\0\25\11"+
    "\3\0\4\11\10\0\2\11\1\u013f\26\11\16\0\1\11"+
    "\7\0\25\11\3\0\4\11\10\0\21\11\1\u013e\7\11"+
    "\16\0\1\11\7\0\25\11\3\0\4\11\10\0\12\11"+
    "\1\u0140\16\11\16\0\1\11\7\0\25\11\3\0\4\11"+
    "\10\0\5\11\1\u0141\23\11\16\0\1\11\7\0\3\11"+
    "\1\222\21\11\3\0\4\11\10\0\13\11\1\u0142\15\11"+
    "\16\0\1\11\7\0\10\11\1\u0137\14\11\3\0\4\11"+
    "\10\0\17\11\1\u0143\11\11\16\0\1\11\7\0\20\11"+
    "\1\u0144\4\11\3\0\4\11\10\0\31\11\16\0\1\11"+
    "\7\0\25\11\3\0\4\11\10\0\26\11\1\u0145\2\11"+
    "\16\0\1\11\7\0\4\11\1\u012c\20\11\3\0\4\11"+
    "\10\0\31\11\16\0\1\11\7\0\2\11\1\u0146\22\11"+
    "\3\0\4\11\10\0\31\11\16\0\1\11\7\0\7\11"+
    "\1\u0147\15\11\3\0\4\11\10\0\31\11\16\0\1\11"+
    "\7\0\4\11\1\u0148\20\11\3\0\4\11\10\0\31\11"+
    "\16\0\1\11\7\0\10\11\1\u0149\14\11\3\0\4\11"+
    "\10\0\31\11\16\0\1\11\7\0\25\11\3\0\4\11"+
    "\10\0\1\11\1\u014a\27\11\16\0\1\11\7\0\17\217"+
    "\1\u014b\5\217\3\0\4\217\10\0\10\217\1\u014b\20\217"+
    "\16\0\1\217\7\0\22\11\1\222\2\11\3\0\4\11"+
    "\10\0\20\11\1\222\10\11\16\0\1\11\7\0\15\11"+
    "\1\u014c\7\11\3\0\4\11\10\0\16\11\1\u014c\12\11"+
    "\16\0\1\11\6\0\26\u0138\1\u014d\74\u0138\1\0\25\11"+
    "\3\0\4\11\10\0\1\11\1\u014e\27\11\16\0\1\11"+
    "\7\0\25\11\3\0\4\11\10\0\11\11\1\247\17\11"+
    "\16\0\1\11\7\0\25\11\3\0\4\11\10\0\15\11"+
    "\1\u014f\13\11\16\0\1\11\7\0\25\11\3\0\4\11"+
    "\10\0\3\11\1\161\25\11\16\0\1\11\7\0\22\11"+
    "\1\222\2\11\3\0\4\11\10\0\20\11\1\266\10\11"+
    "\16\0\1\11\7\0\25\11\3\0\4\11\10\0\5\11"+
    "\1\u0150\23\11\16\0\1\11\7\0\25\11\3\0\4\11"+
    "\10\0\15\11\1\u0151\13\11\16\0\1\11\7\0\25\11"+
    "\3\0\4\11\10\0\11\11\1\u0152\17\11\16\0\1\11"+
    "\7\0\25\11\3\0\4\11\10\0\13\11\1\u0153\15\11"+
    "\16\0\1\11\7\0\4\11\1\106\20\11\3\0\4\11"+
    "\10\0\15\11\1\u014f\13\11\16\0\1\11\7\0\15\11"+
    "\1\u014c\7\11\3\0\4\11\10\0\16\11\1\u0154\12\11"+
    "\16\0\1\11\7\0\20\11\1\u012c\4\11\3\0\4\11"+
    "\10\0\31\11\16\0\1\11\7\0\25\11\3\0\4\11"+
    "\10\0\26\11\1\u0155\2\11\16\0\1\11\7\0\21\11"+
    "\1\u0156\3\11\3\0\4\11\10\0\31\11\16\0\1\11"+
    "\7\0\15\11\1\u0157\7\11\3\0\4\11\10\0\31\11"+
    "\16\0\1\11\7\0\20\11\1\u0158\4\11\3\0\4\11"+
    "\10\0\31\11\16\0\1\11\7\0\21\11\1\u012c\3\11"+
    "\3\0\4\11\10\0\31\11\16\0\1\11\7\0\25\11"+
    "\3\0\4\11\10\0\26\11\1\u0159\2\11\16\0\1\11"+
    "\7\0\3\217\1\u015a\21\217\3\0\4\217\10\0\13\217"+
    "\1\u015a\15\217\16\0\1\217\7\0\14\11\1\u015b\10\11"+
    "\3\0\4\11\10\0\12\11\1\u015b\16\11\16\0\1\11"+
    "\6\0\26\u0138\1\u014d\1\u015c\73\u0138\1\0\25\11\3\0"+
    "\4\11\10\0\15\11\1\u015d\13\11\16\0\1\11\7\0"+
    "\25\11\3\0\4\11\10\0\26\11\1\u015e\2\11\16\0"+
    "\1\11\7\0\25\11\3\0\4\11\10\0\11\11\1\161"+
    "\17\11\16\0\1\11\7\0\25\11\3\0\4\11\10\0"+
    "\12\11\1\u015f\16\11\16\0\1\11\7\0\25\11\3\0"+
    "\4\11\10\0\15\11\1\u0153\13\11\16\0\1\11\7\0"+
    "\25\11\3\0\4\11\10\0\16\11\1\u0160\12\11\16\0"+
    "\1\11\7\0\14\11\1\u015b\10\11\3\0\4\11\10\0"+
    "\12\11\1\144\16\11\16\0\1\11\7\0\10\11\1\u0161"+
    "\14\11\3\0\4\11\10\0\31\11\16\0\1\11\7\0"+
    "\3\11\1\u012c\21\11\3\0\4\11\10\0\31\11\16\0"+
    "\1\11\7\0\16\11\1\u0162\6\11\3\0\4\11\10\0"+
    "\31\11\16\0\1\11\7\0\25\11\3\0\4\11\10\0"+
    "\11\11\1\u0163\17\11\16\0\1\11\7\0\20\217\1\u0164"+
    "\4\217\3\0\4\217\10\0\7\217\1\u0164\21\217\16\0"+
    "\1\217\6\0\26\u0138\1\u014d\22\u0138\1\u0165\51\u0138\1\0"+
    "\25\11\3\0\4\11\10\0\13\11\1\144\15\11\16\0"+
    "\1\11\7\0\25\11\3\0\4\11\10\0\16\11\1\u0166"+
    "\12\11\16\0\1\11\7\0\25\11\3\0\4\11\10\0"+
    "\1\11\1\357\27\11\16\0\1\11\7\0\25\11\3\0"+
    "\4\11\10\0\21\11\1\144\7\11\16\0\1\11\7\0"+
    "\15\11\1\u0167\7\11\3\0\4\11\10\0\31\11\16\0"+
    "\1\11\7\0\1\u0168\24\11\3\0\4\11\10\0\31\11"+
    "\16\0\1\11\7\0\25\11\3\0\4\11\10\0\16\11"+
    "\1\u0169\12\11\16\0\1\11\7\0\4\217\1\u016a\20\217"+
    "\3\0\4\217\10\0\15\217\1\u016a\13\217\16\0\1\217"+
    "\6\0\26\u0138\1\u014d\16\u0138\1\u016b\55\u0138\1\0\25\11"+
    "\3\0\4\11\10\0\12\11\1\u0150\16\11\16\0\1\11"+
    "\7\0\14\11\1\u012c\10\11\3\0\4\11\10\0\31\11"+
    "\16\0\1\11\7\0\2\11\1\u012d\22\11\3\0\4\11"+
    "\10\0\31\11\16\0\1\11\7\0\25\11\3\0\4\11"+
    "\10\0\2\11\1\u016c\26\11\16\0\1\11\7\0\21\217"+
    "\1\u016d\3\217\3\0\4\217\10\0\1\217\1\u016d\27\217"+
    "\16\0\1\217\6\0\26\u0138\1\u014d\22\u0138\1\u016e\51\u0138"+
    "\1\0\25\11\3\0\4\11\10\0\4\11\1\u016f\24\11"+
    "\16\0\1\11\7\0\25\217\3\0\4\217\1\0\1\u0170"+
    "\6\0\31\217\16\0\1\217\7\0\25\11\3\0\4\11"+
    "\10\0\17\11\1\u0171\11\11\16\0\1\11\123\0\1\u0172"+
    "\1\0\1\u0173\4\0\25\11\3\0\4\11\10\0\3\11"+
    "\1\u0174\25\11\16\0\1\11\6\0\43\u0172\1\0\51\u0172"+
    "\1\u0175\1\u0176\4\u0172\116\u0173\1\u0177\1\u0175\3\u0173\1\0"+
    "\25\11\3\0\4\11\10\0\15\11\1\177\13\11\16\0"+
    "\1\11\45\0\1\u0178\63\0\43\u0172\1\0\46\u0172\3\0"+
    "\6\u0172\43\u0173\1\0\46\u0173\3\0\6\u0173";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28884];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\23\1\5\11\41\1\1\11\3\1\1\11"+
    "\21\1\2\0\2\11\6\1\2\0\45\1\3\11\1\0"+
    "\1\11\1\0\1\1\1\0\1\11\3\0\17\1\2\0"+
    "\3\1\1\0\57\1\1\0\14\1\2\0\51\1\2\0"+
    "\7\1\1\0\36\1\1\11\1\0\3\1\1\0\24\1"+
    "\1\0\16\1\1\0\10\1\1\0\5\1\1\0\2\1"+
    "\1\11\1\1\1\0\1\1\2\0\1\1\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[376];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String myLexer;
public int countLine = 1;
public int chars = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 238) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { chars += yytext().length(); myLexer = yytext();return ERROR;
            }
          case 30: break;
          case 2: 
            { chars += yytext().length(); myLexer=yytext(); return CONSTANT;
            }
          case 31: break;
          case 3: 
            { chars += yytext().length(); myLexer=yytext(); return COMPOPERATOR;
            }
          case 32: break;
          case 4: 
            { chars += yytext().length(); myLexer=yytext(); return CONTROLSTRUCT;
            }
          case 33: break;
          case 5: 
            { chars += yytext().length(); myLexer=yytext(); return INT;
            }
          case 34: break;
          case 6: 
            { chars += yytext().length(); myLexer=yytext(); return PARENTHESIS;
            }
          case 35: break;
          case 7: 
            { chars += yytext().length(); myLexer=yytext(); return BRACKETS;
            }
          case 36: break;
          case 8: 
            { chars += yytext().length(); myLexer=yytext(); return KEYS;
            }
          case 37: break;
          case 9: 
            { chars += yytext().length(); myLexer=yytext(); return COMA;
            }
          case 38: break;
          case 10: 
            { chars += yytext().length(); myLexer=yytext(); return SEMICOLON;
            }
          case 39: break;
          case 11: 
            { chars = 0; countLine++; myLexer="\n"; return NEWLINE;
            }
          case 40: break;
          case 12: 
            { chars += yytext().length(); myLexer=yytext(); return BLANKSPACE;
            }
          case 41: break;
          case 13: 
            { chars += yytext().length(); myLexer=yytext(); return AROPERATOR;
            }
          case 42: break;
          case 14: 
            { chars += yytext().length(); myLexer=yytext(); return LOGOPERATOR;
            }
          case 43: break;
          case 15: 
            { chars += yytext().length(); myLexer=yytext(); return ASSIGNOPERATOR;
            }
          case 44: break;
          case 16: 
            { chars += yytext().length(); myLexer=yytext(); return CONCAT;
            }
          case 45: break;
          case 17: 
            { chars += yytext().length(); myLexer=yytext(); return AT;
            }
          case 46: break;
          case 18: 
            { chars += yytext().length(); if(yytext().contains("\n")){chars=0; countLine++;} myLexer=yytext(); return COMMENT;
            }
          case 47: break;
          case 19: 
            { chars += yytext().length(); myLexer=yytext(); return PHP;
            }
          case 48: break;
          case 20: 
            { chars += yytext().length(); myLexer=yytext(); return DOUBLE;
            }
          case 49: break;
          case 21: 
            { chars += yytext().length(); myLexer=yytext(); return RESERVEDWORDS;
            }
          case 50: break;
          case 22: 
            { chars += yytext().length(); myLexer=yytext(); return INCDECOPERATOR;
            }
          case 51: break;
          case 23: 
            { chars += yytext().length(); myLexer=yytext(); return STRING;
            }
          case 52: break;
          case 24: 
            { chars += yytext().length(); myLexer=yytext(); return IDVAR;
            }
          case 53: break;
          case 25: 
            { chars += yytext().length(); myLexer=yytext(); return BOOL;
            }
          case 54: break;
          case 26: 
            { chars += yytext().length(); myLexer=yytext(); return PRECONSTANT;
            }
          case 55: break;
          case 27: 
            { chars += yytext().length(); myLexer=yytext(); return FUNCTION;
            }
          case 56: break;
          case 28: 
            { chars += yytext().length(); myLexer = yytext();return HTML;
            }
          case 57: break;
          case 29: 
            { chars += yytext().length(); myLexer=yytext(); return DB;
            }
          case 58: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
