/* The following code was generated by JFlex 1.6.1 */

package proyectominiphp;

import static proyectominiphp.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/DELL/Desktop/ProyectoAnalizadorLexico/ProyectoMiniPHP/src/proyectominiphp/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\37\1\36\1\106\1\106\1\105\22\0\1\37\1\100\1\112"+
    "\1\114\1\113\1\77\1\101\1\110\1\30\1\30\1\75\1\73\1\34"+
    "\1\74\1\104\1\76\1\24\1\27\6\26\2\25\1\41\1\35\1\21"+
    "\1\102\1\23\1\22\1\103\1\1\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\7\1\7\1\7\1\11\1\7\1\7\1\12\1\13"+
    "\1\7\1\14\1\15\1\16\1\17\1\7\1\7\1\20\1\7\1\7"+
    "\1\31\1\111\1\32\1\0\1\70\1\0\1\42\1\43\1\47\1\51"+
    "\1\54\1\61\1\67\1\55\1\57\1\7\1\72\1\53\1\62\1\50"+
    "\1\56\1\63\1\71\1\46\1\44\1\45\1\60\1\65\1\64\1\66"+
    "\1\52\1\7\1\33\1\40\1\33\1\0\6\7\1\107\172\7\u1f28\0"+
    "\1\106\1\106\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\3\2\1\3\1\4\1\3\2\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\24\2\5\17\1\20\1\1\1\21\1\22\1\23\3\1"+
    "\1\24\2\2\1\0\1\3\1\25\3\0\1\5\1\26"+
    "\1\0\1\20\1\2\1\27\42\2\1\30\1\21\1\0"+
    "\1\26\1\0\1\31\3\0\2\32\2\2\1\0\1\5"+
    "\2\26\1\0\1\5\35\2\1\27\7\2\1\0\1\32"+
    "\1\33\1\0\4\26\21\2\1\27\12\2\1\24\1\32"+
    "\2\26\24\2\1\32\12\2\1\32\1\27\6\2\1\32"+
    "\3\2\1\32\2\2\1\32\1\2\1\32\1\2\1\0"+
    "\1\2\2\0\1\2\3\0\1\34";

  private static int [] zzUnpackAction() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\115\0\232\0\347\0\u0134\0\u0181\0\u01ce\0\u021b"+
    "\0\u0268\0\u02b5\0\115\0\115\0\115\0\115\0\115\0\u0302"+
    "\0\u034f\0\u039c\0\115\0\u03e9\0\u0436\0\u0483\0\u04d0\0\u051d"+
    "\0\u056a\0\u05b7\0\u0604\0\u0651\0\u069e\0\u06eb\0\u0738\0\u0785"+
    "\0\u07d2\0\u081f\0\u086c\0\u08b9\0\u0906\0\u0953\0\u09a0\0\u09ed"+
    "\0\u0a3a\0\u0a87\0\u0ad4\0\115\0\u021b\0\u0b21\0\u021b\0\115"+
    "\0\u0b6e\0\u0bbb\0\u0c08\0\u0c55\0\u0ca2\0\u0cef\0\u0d3c\0\u0d89"+
    "\0\115\0\115\0\u0dd6\0\u0e23\0\u0e70\0\u0ebd\0\u0f0a\0\u0b6e"+
    "\0\115\0\u0f57\0\232\0\u0fa4\0\u0ff1\0\u103e\0\u108b\0\u10d8"+
    "\0\u1125\0\u1172\0\u11bf\0\u120c\0\u1259\0\u12a6\0\u12f3\0\u1340"+
    "\0\u138d\0\u13da\0\u1427\0\u1474\0\u14c1\0\u150e\0\u155b\0\u15a8"+
    "\0\u15f5\0\u1642\0\u168f\0\u16dc\0\u1729\0\u1776\0\u17c3\0\u1810"+
    "\0\u185d\0\u18aa\0\u18f7\0\u1944\0\u1991\0\115\0\115\0\u19de"+
    "\0\u1a2b\0\u0bbb\0\115\0\u1a78\0\u0c08\0\u1ac5\0\u1b12\0\u1b5f"+
    "\0\u1bac\0\u1bf9\0\u1c46\0\u0dd6\0\u1c93\0\u1ce0\0\u1d2d\0\u0e70"+
    "\0\u1d7a\0\u1dc7\0\u1e14\0\u1e61\0\u1eae\0\u1efb\0\u1f48\0\u1f95"+
    "\0\u1fe2\0\u202f\0\u207c\0\u20c9\0\u2116\0\u2163\0\u21b0\0\u21fd"+
    "\0\u224a\0\u2297\0\u22e4\0\u2331\0\u237e\0\u23cb\0\u2418\0\u2465"+
    "\0\u24b2\0\u24ff\0\u254c\0\u2599\0\u25e6\0\u2633\0\u2680\0\u26cd"+
    "\0\u271a\0\u2767\0\u27b4\0\u2801\0\u284e\0\u289b\0\u28e8\0\232"+
    "\0\u2935\0\u2982\0\u29cf\0\u2a1c\0\u2a69\0\u2ab6\0\u2b03\0\u2b50"+
    "\0\u2b9d\0\u2bea\0\u2c37\0\u2c84\0\u2cd1\0\u2d1e\0\u2d6b\0\u2db8"+
    "\0\u2e05\0\u2e52\0\u2e9f\0\u2eec\0\u2f39\0\u2f86\0\u2fd3\0\u3020"+
    "\0\u306d\0\u30ba\0\u3107\0\u3154\0\u31a1\0\u31ee\0\u323b\0\u3288"+
    "\0\u32d5\0\115\0\u3322\0\u336f\0\u33bc\0\u3409\0\u3456\0\u34a3"+
    "\0\u34f0\0\u353d\0\u358a\0\u35d7\0\u3624\0\u3671\0\u36be\0\u370b"+
    "\0\u3758\0\u37a5\0\u37f2\0\u383f\0\u388c\0\u38d9\0\u3926\0\u3973"+
    "\0\u39c0\0\u3a0d\0\u3a5a\0\u3aa7\0\u3af4\0\u3b41\0\u3b8e\0\u3bdb"+
    "\0\u3c28\0\u3c75\0\u3cc2\0\u3d0f\0\u3d5c\0\u3da9\0\u3df6\0\u3e43"+
    "\0\u3e90\0\u3edd\0\u3f2a\0\u3f77\0\u3fc4\0\u4011\0\u405e\0\u40ab"+
    "\0\u40f8\0\u4145\0\u4192\0\u41df\0\u422c\0\u4279\0\u42c6\0\u4313"+
    "\0\u4360\0\u43ad\0\u43fa\0\u4447\0\u4494\0\u44e1\0\u452e\0\115";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\5\3\1\4\7\3\1\5\2\3\1\6\1\7"+
    "\1\10\1\11\3\12\1\13\2\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\3\1\34\1\35\1\3"+
    "\1\36\1\37\1\40\1\41\1\3\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\2\3\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\21\1\0"+
    "\1\3\1\62\1\2\1\63\1\64\1\65\116\0\20\3"+
    "\3\0\4\3\12\0\31\3\14\0\1\3\6\0\1\66"+
    "\17\3\3\0\4\3\12\0\1\66\30\3\14\0\1\3"+
    "\6\0\13\3\1\67\4\3\3\0\4\3\12\0\4\3"+
    "\1\67\24\3\14\0\1\3\27\0\1\70\57\0\1\71"+
    "\35\0\1\72\173\0\1\71\14\0\1\73\2\0\1\74"+
    "\12\0\1\75\3\0\1\76\1\77\2\76\13\0\1\73"+
    "\10\0\1\74\11\0\1\75\15\0\1\100\15\0\1\74"+
    "\16\0\4\12\24\0\1\74\27\0\1\100\46\0\1\20"+
    "\115\0\1\21\45\0\1\21\47\0\1\101\55\0\20\3"+
    "\3\0\4\3\12\0\1\3\1\102\1\103\1\3\1\104"+
    "\1\3\1\105\22\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\12\0\4\3\1\106\24\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\12\0\3\3\1\107\16\3\1\110"+
    "\6\3\14\0\1\3\6\0\13\3\1\67\4\3\3\0"+
    "\4\3\12\0\4\3\1\111\6\3\1\112\15\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\12\0\12\3\1\113"+
    "\16\3\14\0\1\3\6\0\20\3\3\0\4\3\12\0"+
    "\1\114\10\3\1\115\2\3\1\116\14\3\14\0\1\3"+
    "\6\0\20\3\3\0\4\3\12\0\1\117\11\3\1\120"+
    "\16\3\14\0\1\3\6\0\20\3\3\0\4\3\12\0"+
    "\12\3\1\121\1\3\1\103\1\122\13\3\14\0\1\3"+
    "\6\0\20\3\3\0\4\3\12\0\15\3\1\123\13\3"+
    "\14\0\1\3\6\0\20\3\3\0\4\3\12\0\5\3"+
    "\1\124\1\125\2\3\1\126\6\3\1\127\2\3\1\130"+
    "\1\131\4\3\14\0\1\3\6\0\20\3\3\0\4\3"+
    "\12\0\4\3\1\103\24\3\14\0\1\3\6\0\20\3"+
    "\3\0\4\3\12\0\2\3\1\132\3\3\1\133\10\3"+
    "\1\103\1\134\10\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\12\0\2\3\1\122\3\3\1\132\22\3\14\0"+
    "\1\3\6\0\1\66\17\3\3\0\4\3\12\0\1\66"+
    "\13\3\1\135\1\136\1\137\12\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\12\0\4\3\1\140\11\3\1\141"+
    "\12\3\14\0\1\3\6\0\20\3\3\0\4\3\12\0"+
    "\13\3\1\142\15\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\12\0\1\36\30\3\14\0\1\3\6\0\20\3"+
    "\3\0\4\3\12\0\14\3\1\36\14\3\14\0\1\3"+
    "\6\0\20\3\3\0\4\3\12\0\11\3\1\143\2\3"+
    "\1\144\14\3\14\0\1\3\6\0\20\3\3\0\4\3"+
    "\12\0\26\3\1\145\2\3\14\0\1\3\31\0\1\11"+
    "\3\12\43\0\1\146\6\0\1\147\1\0\1\100\34\0"+
    "\1\11\3\12\44\0\1\146\5\0\1\147\1\0\1\100"+
    "\105\0\1\54\4\0\1\147\107\0\1\150\1\65\3\0"+
    "\1\147\113\0\1\101\37\0\4\151\65\0\36\152\1\0"+
    "\51\152\1\153\1\154\3\152\36\155\1\0\52\155\1\156"+
    "\1\153\2\155\1\0\13\157\1\160\4\157\21\0\4\157"+
    "\1\160\24\157\14\0\1\157\5\0\36\65\1\0\46\65"+
    "\3\0\5\65\1\0\10\3\1\161\7\3\3\0\4\3"+
    "\12\0\11\3\1\161\17\3\14\0\1\3\6\0\16\3"+
    "\1\162\1\3\3\0\4\3\12\0\16\3\1\162\12\3"+
    "\14\0\1\3\20\0\1\163\47\0\1\163\55\0\1\164"+
    "\2\0\1\164\111\0\1\165\3\166\43\0\2\167\21\0"+
    "\6\170\15\0\4\170\12\0\2\170\3\0\1\170\1\0"+
    "\1\170\2\0\1\170\4\0\1\170\40\0\1\74\16\0"+
    "\1\76\1\77\2\76\24\0\1\74\27\0\1\100\15\0"+
    "\1\74\16\0\4\77\24\0\1\74\27\0\1\100\11\0"+
    "\20\3\3\0\4\3\12\0\2\3\1\171\26\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\12\0\4\3\1\172"+
    "\24\3\14\0\1\3\6\0\20\3\3\0\4\3\12\0"+
    "\7\3\1\103\21\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\12\0\12\3\1\173\16\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\12\0\1\174\30\3\14\0\1\3"+
    "\6\0\20\3\3\0\4\3\12\0\15\3\1\175\13\3"+
    "\14\0\1\3\6\0\16\3\1\162\1\3\3\0\4\3"+
    "\12\0\1\176\7\3\1\103\5\3\1\162\12\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\12\0\4\3\1\177"+
    "\24\3\14\0\1\3\6\0\20\3\3\0\4\3\12\0"+
    "\3\3\1\200\23\3\1\201\1\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\12\0\2\3\1\122\1\202\5\3"+
    "\1\203\17\3\14\0\1\3\6\0\20\3\3\0\4\3"+
    "\12\0\1\204\13\3\1\205\14\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\12\0\6\3\1\206\22\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\12\0\20\3\1\207"+
    "\10\3\14\0\1\3\6\0\20\3\3\0\4\3\12\0"+
    "\22\3\1\103\6\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\12\0\5\3\1\210\11\3\1\211\11\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\12\0\12\3\1\103"+
    "\16\3\14\0\1\3\6\0\20\3\3\0\4\3\12\0"+
    "\2\3\1\212\26\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\12\0\13\3\1\213\15\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\12\0\7\3\1\214\21\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\12\0\2\3\1\215"+
    "\26\3\14\0\1\3\6\0\20\3\3\0\4\3\12\0"+
    "\21\3\1\216\7\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\12\0\1\217\30\3\14\0\1\3\6\0\20\3"+
    "\3\0\4\3\12\0\3\3\1\220\11\3\1\212\13\3"+
    "\14\0\1\3\6\0\20\3\3\0\4\3\12\0\2\3"+
    "\1\221\26\3\14\0\1\3\6\0\20\3\3\0\4\3"+
    "\12\0\2\3\1\222\1\223\1\3\1\224\23\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\12\0\21\3\1\225"+
    "\7\3\14\0\1\3\6\0\20\3\3\0\4\3\12\0"+
    "\4\3\1\226\24\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\12\0\6\3\1\130\22\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\12\0\6\3\1\227\22\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\12\0\14\3\1\230"+
    "\1\231\13\3\14\0\1\3\6\0\20\3\3\0\4\3"+
    "\12\0\1\3\1\232\27\3\14\0\1\3\6\0\20\3"+
    "\3\0\4\3\12\0\15\3\1\233\13\3\14\0\1\3"+
    "\6\0\20\3\3\0\4\3\12\0\14\3\1\234\14\3"+
    "\14\0\1\3\6\0\20\3\3\0\4\3\12\0\3\3"+
    "\1\213\25\3\14\0\1\3\6\0\20\3\3\0\4\3"+
    "\12\0\13\3\1\235\15\3\14\0\1\3\5\0\30\150"+
    "\1\0\44\150\1\236\1\0\16\150\5\0\1\74\16\0"+
    "\4\151\24\0\1\74\40\0\36\152\1\0\46\152\3\0"+
    "\5\152\36\155\1\0\46\155\3\0\5\155\1\0\20\157"+
    "\3\0\4\157\12\0\31\157\14\0\1\157\6\0\4\157"+
    "\1\237\13\157\3\0\4\157\12\0\12\157\1\237\16\157"+
    "\14\0\1\157\6\0\14\3\1\162\3\3\3\0\4\3"+
    "\12\0\2\3\1\162\26\3\14\0\1\3\6\0\4\3"+
    "\1\240\13\3\3\0\4\3\12\0\12\3\1\240\16\3"+
    "\14\0\1\3\15\0\1\241\44\0\1\241\37\0\2\242"+
    "\1\243\15\242\1\244\3\242\1\245\1\242\2\245\6\242"+
    "\1\0\4\242\1\243\22\242\1\244\16\242\3\0\31\242"+
    "\4\166\6\242\1\0\46\242\3\0\5\242\24\0\1\165"+
    "\3\166\66\0\20\3\3\0\4\3\12\0\3\3\1\246"+
    "\25\3\14\0\1\3\6\0\20\3\3\0\4\3\12\0"+
    "\1\247\30\3\14\0\1\3\6\0\20\3\3\0\4\3"+
    "\12\0\1\250\30\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\12\0\3\3\1\251\25\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\12\0\3\3\1\202\25\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\12\0\15\3\1\212"+
    "\13\3\14\0\1\3\6\0\20\3\3\0\4\3\12\0"+
    "\14\3\1\120\14\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\12\0\16\3\1\252\12\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\12\0\16\3\1\253\12\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\12\0\5\3\1\254"+
    "\23\3\14\0\1\3\6\0\20\3\3\0\4\3\12\0"+
    "\11\3\1\255\17\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\12\0\2\3\1\256\26\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\12\0\6\3\1\122\22\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\12\0\2\3\1\212"+
    "\1\257\25\3\14\0\1\3\6\0\20\3\3\0\4\3"+
    "\12\0\12\3\1\260\16\3\14\0\1\3\6\0\20\3"+
    "\3\0\4\3\12\0\11\3\1\261\17\3\14\0\1\3"+
    "\6\0\20\3\3\0\4\3\12\0\1\262\30\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\12\0\3\3\1\103"+
    "\25\3\14\0\1\3\6\0\20\3\3\0\4\3\12\0"+
    "\14\3\1\103\14\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\12\0\2\3\1\263\4\3\1\264\5\3\1\265"+
    "\1\3\1\266\2\3\1\43\6\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\12\0\12\3\1\267\16\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\12\0\3\3\1\247"+
    "\25\3\14\0\1\3\6\0\20\3\3\0\4\3\12\0"+
    "\11\3\1\103\17\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\12\0\12\3\1\270\16\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\12\0\12\3\1\212\16\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\12\0\3\3\1\271"+
    "\25\3\14\0\1\3\6\0\20\3\3\0\4\3\12\0"+
    "\12\3\1\272\16\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\12\0\11\3\1\273\17\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\12\0\11\3\1\274\17\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\12\0\12\3\1\275"+
    "\16\3\14\0\1\3\6\0\20\3\3\0\4\3\12\0"+
    "\5\3\1\276\23\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\12\0\3\3\1\277\25\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\12\0\6\3\1\212\14\3\1\300"+
    "\5\3\14\0\1\3\6\0\20\3\3\0\4\3\12\0"+
    "\11\3\1\251\17\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\12\0\11\3\1\122\17\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\12\0\1\3\1\130\27\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\12\0\1\301\30\3"+
    "\14\0\1\3\103\0\1\302\17\0\2\157\1\303\15\157"+
    "\3\0\4\157\12\0\5\157\1\303\23\157\14\0\1\157"+
    "\20\0\1\72\47\0\1\72\55\0\4\242\111\0\1\304"+
    "\2\242\1\304\66\0\6\305\15\0\4\305\12\0\2\305"+
    "\3\0\1\305\1\0\1\305\2\0\1\305\4\0\1\305"+
    "\33\0\24\242\1\245\1\242\2\245\6\242\1\0\46\242"+
    "\3\0\5\242\1\0\20\3\3\0\4\3\12\0\4\3"+
    "\1\306\24\3\14\0\1\3\6\0\20\3\3\0\4\3"+
    "\12\0\10\3\1\103\20\3\14\0\1\3\6\0\20\3"+
    "\3\0\4\3\12\0\30\3\1\103\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\12\0\15\3\1\307\13\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\12\0\4\3\1\310"+
    "\24\3\14\0\1\3\6\0\20\3\3\0\4\3\12\0"+
    "\15\3\1\311\13\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\12\0\13\3\1\103\15\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\12\0\1\312\30\3\14\0\1\3"+
    "\6\0\20\3\3\0\4\3\12\0\2\3\1\103\26\3"+
    "\14\0\1\3\6\0\20\3\3\0\4\3\12\0\15\3"+
    "\1\313\13\3\14\0\1\3\6\0\20\3\3\0\4\3"+
    "\12\0\2\3\1\314\26\3\14\0\1\3\6\0\20\3"+
    "\3\0\4\3\12\0\1\315\30\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\12\0\16\3\1\316\12\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\12\0\22\3\1\110"+
    "\6\3\14\0\1\3\6\0\20\3\3\0\4\3\12\0"+
    "\12\3\1\317\16\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\12\0\17\3\1\103\11\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\12\0\14\3\1\135\14\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\12\0\15\3\1\265"+
    "\13\3\14\0\1\3\6\0\20\3\3\0\4\3\12\0"+
    "\6\3\1\320\22\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\12\0\1\321\11\3\1\322\16\3\14\0\1\3"+
    "\6\0\20\3\3\0\4\3\12\0\4\3\1\323\24\3"+
    "\14\0\1\3\6\0\20\3\3\0\4\3\12\0\16\3"+
    "\1\324\12\3\14\0\1\3\6\0\20\3\3\0\4\3"+
    "\12\0\12\3\1\325\16\3\14\0\1\3\6\0\20\3"+
    "\3\0\4\3\12\0\1\202\30\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\12\0\3\3\1\326\25\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\12\0\12\3\1\327"+
    "\16\3\14\0\1\3\6\0\20\3\3\0\4\3\12\0"+
    "\1\330\30\3\14\0\1\3\6\0\20\3\3\0\4\3"+
    "\12\0\11\3\1\331\17\3\14\0\1\3\6\0\11\157"+
    "\1\332\6\157\3\0\4\157\12\0\14\157\1\332\14\157"+
    "\14\0\1\157\5\0\24\242\1\304\2\242\1\304\6\242"+
    "\1\0\46\242\3\0\6\242\6\305\15\242\4\305\6\242"+
    "\1\0\3\242\2\305\3\242\1\305\1\242\1\305\2\242"+
    "\1\305\4\242\1\305\23\242\3\0\5\242\1\0\20\3"+
    "\3\0\4\3\12\0\1\333\30\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\12\0\5\3\1\103\23\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\12\0\6\3\1\103"+
    "\22\3\14\0\1\3\6\0\20\3\3\0\4\3\12\0"+
    "\4\3\1\334\24\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\12\0\1\3\1\233\27\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\12\0\6\3\1\335\22\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\12\0\21\3\1\336"+
    "\7\3\14\0\1\3\6\0\20\3\3\0\4\3\12\0"+
    "\4\3\1\122\24\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\12\0\11\3\1\212\17\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\12\0\5\3\1\210\23\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\12\0\7\3\1\256"+
    "\21\3\14\0\1\3\6\0\20\3\3\0\4\3\12\0"+
    "\6\3\1\337\22\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\12\0\1\340\30\3\14\0\1\3\6\0\20\3"+
    "\3\0\4\3\12\0\17\3\1\336\11\3\14\0\1\3"+
    "\6\0\20\3\3\0\4\3\12\0\7\3\1\334\21\3"+
    "\14\0\1\3\6\0\20\3\3\0\4\3\12\0\20\3"+
    "\1\341\10\3\14\0\1\3\6\0\20\3\3\0\4\3"+
    "\12\0\15\3\1\342\13\3\14\0\1\3\6\0\20\3"+
    "\3\0\4\3\12\0\5\3\1\343\23\3\14\0\1\3"+
    "\6\0\20\3\3\0\4\3\12\0\3\3\1\122\25\3"+
    "\14\0\1\3\6\0\20\3\3\0\4\3\12\0\3\3"+
    "\1\344\25\3\14\0\1\3\6\0\13\157\1\345\4\157"+
    "\3\0\4\157\12\0\4\157\1\345\24\157\14\0\1\157"+
    "\6\0\20\3\3\0\4\3\12\0\5\3\1\212\23\3"+
    "\14\0\1\3\6\0\20\3\3\0\4\3\12\0\12\3"+
    "\1\346\16\3\14\0\1\3\6\0\20\3\3\0\4\3"+
    "\12\0\16\3\1\122\12\3\14\0\1\3\6\0\20\3"+
    "\3\0\4\3\12\0\1\347\30\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\12\0\5\3\1\350\23\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\12\0\7\3\1\351"+
    "\21\3\14\0\1\3\6\0\20\3\3\0\4\3\12\0"+
    "\12\3\1\352\16\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\12\0\14\3\1\310\14\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\12\0\3\3\1\353\25\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\12\0\26\3\1\354"+
    "\2\3\14\0\1\3\6\0\3\157\1\355\14\157\3\0"+
    "\4\157\12\0\7\157\1\355\21\157\14\0\1\157\6\0"+
    "\20\3\3\0\4\3\12\0\26\3\1\356\2\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\12\0\5\3\1\122"+
    "\23\3\14\0\1\3\6\0\20\3\3\0\4\3\12\0"+
    "\12\3\1\351\16\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\12\0\14\3\1\265\14\3\14\0\1\3\6\0"+
    "\20\3\3\0\4\3\12\0\6\3\1\357\22\3\14\0"+
    "\1\3\6\0\20\3\3\0\4\3\12\0\12\3\1\105"+
    "\16\3\14\0\1\3\6\0\20\3\3\0\4\3\12\0"+
    "\5\3\1\360\23\3\14\0\1\3\6\0\14\157\1\361"+
    "\3\157\3\0\4\157\12\0\2\157\1\361\26\157\14\0"+
    "\1\157\6\0\20\3\3\0\4\3\12\0\14\3\1\362"+
    "\14\3\14\0\1\3\6\0\20\3\3\0\4\3\12\0"+
    "\3\3\1\256\25\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\12\0\14\3\1\363\14\3\14\0\1\3\6\0"+
    "\4\157\1\364\13\157\3\0\4\157\12\0\12\157\1\364"+
    "\16\157\14\0\1\157\6\0\20\3\3\0\4\3\12\0"+
    "\6\3\1\347\22\3\14\0\1\3\6\0\20\3\3\0"+
    "\4\3\12\0\20\3\1\365\10\3\14\0\1\3\6\0"+
    "\15\157\1\366\2\157\3\0\4\157\12\0\3\157\1\366"+
    "\25\157\14\0\1\157\6\0\20\3\3\0\4\3\12\0"+
    "\21\3\1\367\7\3\14\0\1\3\6\0\20\157\3\0"+
    "\4\157\1\0\1\370\10\0\31\157\14\0\1\157\6\0"+
    "\20\3\3\0\4\3\12\0\15\3\1\371\13\3\14\0"+
    "\1\3\115\0\1\372\1\0\1\373\3\0\20\3\3\0"+
    "\4\3\12\0\11\3\1\374\17\3\14\0\1\3\5\0"+
    "\36\372\1\0\51\372\1\375\1\376\3\372\36\373\1\0"+
    "\52\373\1\377\1\375\2\373\1\0\20\3\3\0\4\3"+
    "\12\0\12\3\1\36\16\3\14\0\1\3\37\0\1\u0100"+
    "\62\0\36\372\1\0\46\372\3\0\5\372\36\373\1\0"+
    "\46\373\3\0\5\373";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17787];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\5\11\3\1\1\11\30\1\1\11"+
    "\3\1\1\11\7\1\1\0\2\11\3\0\2\1\1\0"+
    "\1\11\44\1\2\11\1\0\1\1\1\0\1\11\3\0"+
    "\4\1\1\0\3\1\1\0\46\1\1\0\2\1\1\0"+
    "\40\1\1\11\65\1\1\0\1\1\2\0\1\1\3\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String myLexer;
public int countLine = 0;
public int chars = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 238) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { chars += yytext().length(); myLexer = yytext();return ERROR;
            }
          case 29: break;
          case 2: 
            { chars += yytext().length(); myLexer=yytext(); return CONSTANT;
            }
          case 30: break;
          case 3: 
            { chars += yytext().length(); myLexer=yytext(); return COMPOPERATOR;
            }
          case 31: break;
          case 4: 
            { chars += yytext().length(); myLexer=yytext(); return QMARK;
            }
          case 32: break;
          case 5: 
            { chars += yytext().length(); myLexer=yytext(); return INT;
            }
          case 33: break;
          case 6: 
            { chars += yytext().length(); myLexer=yytext(); return PARENTHESIS;
            }
          case 34: break;
          case 7: 
            { chars += yytext().length(); myLexer=yytext(); return BRACKETS;
            }
          case 35: break;
          case 8: 
            { chars += yytext().length(); myLexer=yytext(); return KEYS;
            }
          case 36: break;
          case 9: 
            { chars += yytext().length(); myLexer=yytext(); return COMA;
            }
          case 37: break;
          case 10: 
            { chars += yytext().length(); myLexer=yytext(); return SEMICOLON;
            }
          case 38: break;
          case 11: 
            { chars = 0; countLine++; myLexer="\n"; return NEWLINE;
            }
          case 39: break;
          case 12: 
            { chars += yytext().length(); myLexer=yytext(); return BLANKSPACE;
            }
          case 40: break;
          case 13: 
            { chars += yytext().length(); myLexer=yytext(); return SPLIT;
            }
          case 41: break;
          case 14: 
            { chars += yytext().length(); myLexer=yytext(); return TWOPOINTS;
            }
          case 42: break;
          case 15: 
            { chars += yytext().length(); myLexer=yytext(); return AROPERATOR;
            }
          case 43: break;
          case 16: 
            { chars += yytext().length(); myLexer=yytext(); return LOGOPERATOR;
            }
          case 44: break;
          case 17: 
            { chars += yytext().length(); myLexer=yytext(); return ASSIGNOPERATOR;
            }
          case 45: break;
          case 18: 
            { chars += yytext().length(); myLexer=yytext(); return AT;
            }
          case 46: break;
          case 19: 
            { chars += yytext().length(); myLexer=yytext(); return CONCAT;
            }
          case 47: break;
          case 20: 
            { chars += yytext().length(); if(yytext().contains("\n")){chars=0; countLine++;} myLexer=yytext(); return COMMENT;
            }
          case 48: break;
          case 21: 
            { chars += yytext().length(); myLexer=yytext(); return PHP;
            }
          case 49: break;
          case 22: 
            { chars += yytext().length(); myLexer=yytext(); return DOUBLE;
            }
          case 50: break;
          case 23: 
            { chars += yytext().length(); myLexer=yytext(); return RESERVEDWORDS;
            }
          case 51: break;
          case 24: 
            { chars += yytext().length(); myLexer=yytext(); return INCDECOPERATOR;
            }
          case 52: break;
          case 25: 
            { chars += yytext().length(); myLexer=yytext(); return STRING;
            }
          case 53: break;
          case 26: 
            { chars += yytext().length(); myLexer=yytext(); return IDVAR;
            }
          case 54: break;
          case 27: 
            { chars += yytext().length(); myLexer=yytext(); return BOOL;
            }
          case 55: break;
          case 28: 
            { chars += yytext().length(); myLexer=yytext(); return DB;
            }
          case 56: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
