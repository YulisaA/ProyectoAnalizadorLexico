/* The following code was generated by JFlex 1.6.1 */

package proyectominiphp;

import static proyectominiphp.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/DELL/Desktop/ProyectoAnalizadorLexico/ProyectoMiniPHP/src/proyectominiphp/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\37\1\36\1\111\1\111\1\110\22\0\1\37\1\104\1\114"+
    "\1\115\1\44\1\103\1\105\1\113\1\30\1\30\1\101\1\77\1\34"+
    "\1\100\1\107\1\102\1\24\1\27\6\26\2\25\1\42\1\35\1\21"+
    "\1\106\1\23\1\22\1\43\1\1\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\7\1\7\1\7\1\11\1\7\1\7\1\12\1\13"+
    "\1\7\1\14\1\15\1\16\1\17\1\7\1\7\1\20\1\7\1\7"+
    "\1\31\1\40\1\32\1\45\1\74\1\0\1\46\1\47\1\53\1\55"+
    "\1\60\1\65\1\73\1\61\1\63\1\7\1\76\1\57\1\66\1\54"+
    "\1\62\1\67\1\75\1\52\1\50\1\51\1\64\1\71\1\70\1\72"+
    "\1\56\1\7\1\33\1\41\1\33\1\0\6\7\1\112\172\7\u1f28\0"+
    "\1\111\1\111\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\3\2\1\3\1\4\1\3\2\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\24\2\5\23\1\24\1\1"+
    "\1\25\1\26\2\1\1\27\2\2\1\0\1\3\1\30"+
    "\3\0\1\5\1\31\1\0\1\24\2\32\1\2\1\33"+
    "\42\2\1\34\1\25\1\0\1\31\2\0\1\35\1\0"+
    "\1\35\2\2\1\0\1\5\2\31\1\0\1\5\1\32"+
    "\35\2\1\33\7\2\1\0\1\35\1\0\1\36\1\0"+
    "\4\31\1\32\21\2\1\33\12\2\1\27\2\31\1\32"+
    "\24\2\1\32\12\2\1\32\1\33\6\2\1\32\3\2"+
    "\1\32\2\2\1\32\1\2\1\0\1\2\2\0\1\2"+
    "\4\0\1\2\1\0\2\37";

  private static int [] zzUnpackAction() {
    int [] result = new int[263];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\116\0\234\0\352\0\u0138\0\u0186\0\u01d4\0\u0222"+
    "\0\u0270\0\u02be\0\116\0\116\0\116\0\116\0\116\0\u030c"+
    "\0\u035a\0\116\0\u03a8\0\116\0\116\0\u03f6\0\116\0\u0444"+
    "\0\u0492\0\u04e0\0\u052e\0\u057c\0\u05ca\0\u0618\0\u0666\0\u06b4"+
    "\0\u0702\0\u0750\0\u079e\0\u07ec\0\u083a\0\u0888\0\u08d6\0\u0924"+
    "\0\u0972\0\u09c0\0\u0a0e\0\u0a5c\0\u0aaa\0\u0af8\0\u0b46\0\116"+
    "\0\u0222\0\u0b94\0\u0222\0\u0be2\0\u0c30\0\u0c7e\0\u0ccc\0\u0d1a"+
    "\0\u0d68\0\u0db6\0\116\0\116\0\u0e04\0\u0e52\0\u0ea0\0\u0eee"+
    "\0\u0f3c\0\u0be2\0\116\0\u0f8a\0\u0fd8\0\u1026\0\234\0\u1074"+
    "\0\u10c2\0\u1110\0\u115e\0\u11ac\0\u11fa\0\u1248\0\u1296\0\u12e4"+
    "\0\u1332\0\u1380\0\u13ce\0\u141c\0\u146a\0\u14b8\0\u1506\0\u1554"+
    "\0\u15a2\0\u15f0\0\u163e\0\u168c\0\u16da\0\u1728\0\u1776\0\u17c4"+
    "\0\u1812\0\u1860\0\u18ae\0\u18fc\0\u194a\0\u1998\0\u19e6\0\u1a34"+
    "\0\u1a82\0\116\0\116\0\u1ad0\0\u1b1e\0\u0c30\0\u1b6c\0\116"+
    "\0\u1bba\0\u1bba\0\u1c08\0\u1c56\0\u1ca4\0\u0e04\0\u1cf2\0\u1d40"+
    "\0\u1d8e\0\u0ea0\0\u1ddc\0\u1e2a\0\u1e78\0\u1ec6\0\u1f14\0\u1f62"+
    "\0\u1fb0\0\u1ffe\0\u204c\0\u209a\0\u20e8\0\u2136\0\u2184\0\u21d2"+
    "\0\u2220\0\u226e\0\u22bc\0\u230a\0\u2358\0\u23a6\0\u23f4\0\u2442"+
    "\0\u2490\0\u24de\0\u252c\0\u257a\0\u25c8\0\u2616\0\u2664\0\u26b2"+
    "\0\u2700\0\u274e\0\u279c\0\u27ea\0\u2838\0\u2886\0\u28d4\0\u2922"+
    "\0\u2970\0\u0c30\0\u0c7e\0\234\0\u29be\0\u2a0c\0\u2a5a\0\u2aa8"+
    "\0\u2af6\0\u2b44\0\u2b92\0\u2be0\0\u2c2e\0\u2c7c\0\u2cca\0\u2d18"+
    "\0\u2d66\0\u2db4\0\u2e02\0\u2e50\0\u2e9e\0\u2eec\0\u2f3a\0\u2f88"+
    "\0\u2fd6\0\u3024\0\u3072\0\u30c0\0\u310e\0\u315c\0\u31aa\0\u31f8"+
    "\0\u3246\0\u3294\0\u32e2\0\u3330\0\u337e\0\u33cc\0\116\0\u341a"+
    "\0\u3468\0\u34b6\0\u3504\0\u3552\0\u35a0\0\u35ee\0\u363c\0\u368a"+
    "\0\u36d8\0\u3726\0\u3774\0\u37c2\0\u3810\0\u385e\0\u38ac\0\u38fa"+
    "\0\u3948\0\u3996\0\u39e4\0\u3a32\0\u3a80\0\u3ace\0\u3b1c\0\u3b6a"+
    "\0\u3bb8\0\u3c06\0\u3c54\0\u3ca2\0\u3cf0\0\u3d3e\0\u3d8c\0\u3dda"+
    "\0\u3e28\0\u3e76\0\u3ec4\0\u3f12\0\u3f60\0\u3fae\0\u3ffc\0\u404a"+
    "\0\u4098\0\u40e6\0\u4134\0\u4182\0\u41d0\0\u421e\0\u426c\0\u42ba"+
    "\0\u4308\0\u4356\0\u43a4\0\u43f2\0\u4440\0\u448e\0\u44dc\0\u452a"+
    "\0\u4578\0\u45c6\0\u4614\0\u4662\0\u46b0\0\116\0\u4440";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[263];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\5\3\1\4\7\3\1\5\2\3\1\6\1\7"+
    "\1\10\1\11\3\12\1\13\2\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\3\1\40\1\41\1\3\1\42\1\43\1\44\1\45"+
    "\1\3\1\46\1\47\1\50\1\51\1\52\1\53\2\3"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\21\1\0\1\3\1\65\1\66\1\67\117\0"+
    "\20\3\3\0\4\3\16\0\31\3\13\0\1\3\4\0"+
    "\1\70\17\3\3\0\4\3\16\0\1\70\30\3\13\0"+
    "\1\3\4\0\13\3\1\71\4\3\3\0\4\3\16\0"+
    "\4\3\1\71\24\3\13\0\1\3\25\0\1\72\63\0"+
    "\1\73\32\0\1\74\200\0\1\73\11\0\1\75\2\0"+
    "\1\76\12\0\1\77\3\0\1\100\1\101\2\100\17\0"+
    "\1\75\10\0\1\76\11\0\1\77\14\0\1\102\13\0"+
    "\1\76\16\0\4\12\30\0\1\76\26\0\1\102\44\0"+
    "\1\20\116\0\1\21\50\0\1\21\46\0\1\103\55\0"+
    "\13\104\1\105\4\104\25\0\4\104\1\105\24\104\13\0"+
    "\1\104\4\0\20\3\3\0\4\3\16\0\1\3\1\106"+
    "\1\107\1\3\1\110\1\3\1\111\22\3\13\0\1\3"+
    "\4\0\20\3\3\0\4\3\16\0\4\3\1\112\24\3"+
    "\13\0\1\3\4\0\20\3\3\0\4\3\16\0\3\3"+
    "\1\113\16\3\1\114\6\3\13\0\1\3\4\0\13\3"+
    "\1\71\4\3\3\0\4\3\16\0\4\3\1\115\6\3"+
    "\1\116\15\3\13\0\1\3\4\0\20\3\3\0\4\3"+
    "\16\0\12\3\1\117\16\3\13\0\1\3\4\0\20\3"+
    "\3\0\4\3\16\0\1\120\10\3\1\121\2\3\1\122"+
    "\14\3\13\0\1\3\4\0\20\3\3\0\4\3\16\0"+
    "\1\123\11\3\1\124\16\3\13\0\1\3\4\0\20\3"+
    "\3\0\4\3\16\0\12\3\1\125\1\3\1\107\1\126"+
    "\13\3\13\0\1\3\4\0\20\3\3\0\4\3\16\0"+
    "\15\3\1\127\13\3\13\0\1\3\4\0\20\3\3\0"+
    "\4\3\16\0\5\3\1\130\1\131\2\3\1\132\6\3"+
    "\1\133\2\3\1\134\1\135\4\3\13\0\1\3\4\0"+
    "\20\3\3\0\4\3\16\0\4\3\1\107\24\3\13\0"+
    "\1\3\4\0\20\3\3\0\4\3\16\0\2\3\1\136"+
    "\3\3\1\137\10\3\1\107\1\140\10\3\13\0\1\3"+
    "\4\0\20\3\3\0\4\3\16\0\2\3\1\126\3\3"+
    "\1\136\22\3\13\0\1\3\4\0\1\70\17\3\3\0"+
    "\4\3\16\0\1\70\13\3\1\141\1\142\1\143\12\3"+
    "\13\0\1\3\4\0\20\3\3\0\4\3\16\0\4\3"+
    "\1\144\11\3\1\145\12\3\13\0\1\3\4\0\20\3"+
    "\3\0\4\3\16\0\13\3\1\146\15\3\13\0\1\3"+
    "\4\0\20\3\3\0\4\3\16\0\1\42\30\3\13\0"+
    "\1\3\4\0\20\3\3\0\4\3\16\0\14\3\1\42"+
    "\14\3\13\0\1\3\4\0\20\3\3\0\4\3\16\0"+
    "\11\3\1\147\2\3\1\150\14\3\13\0\1\3\4\0"+
    "\20\3\3\0\4\3\16\0\26\3\1\151\2\3\13\0"+
    "\1\3\27\0\1\11\3\12\47\0\1\152\6\0\1\153"+
    "\1\102\32\0\1\11\3\12\50\0\1\152\5\0\1\153"+
    "\1\102\107\0\1\60\4\0\1\153\110\0\1\154\1\67"+
    "\3\0\1\153\114\0\1\103\34\0\4\155\66\0\30\156"+
    "\1\0\5\156\1\0\1\156\1\157\52\156\1\160\2\156"+
    "\30\0\1\161\5\0\1\161\1\0\2\161\3\0\1\161"+
    "\46\0\1\162\1\0\36\67\1\0\51\67\3\0\3\67"+
    "\1\0\10\3\1\163\7\3\3\0\4\3\16\0\11\3"+
    "\1\163\17\3\13\0\1\3\4\0\16\3\1\164\1\3"+
    "\3\0\4\3\16\0\16\3\1\164\12\3\13\0\1\3"+
    "\16\0\1\165\53\0\1\165\52\0\1\166\2\0\1\166"+
    "\112\0\1\167\3\170\47\0\2\171\16\0\6\172\15\0"+
    "\4\172\16\0\2\172\3\0\1\172\1\0\1\172\2\0"+
    "\1\172\4\0\1\172\35\0\1\76\16\0\1\100\1\101"+
    "\2\100\30\0\1\76\26\0\1\102\13\0\1\76\16\0"+
    "\4\101\30\0\1\76\26\0\1\102\7\0\20\104\3\0"+
    "\4\104\16\0\31\104\13\0\1\104\4\0\4\104\1\173"+
    "\13\104\3\0\4\104\16\0\12\104\1\173\16\104\13\0"+
    "\1\104\4\0\20\3\3\0\4\3\16\0\2\3\1\174"+
    "\26\3\13\0\1\3\4\0\20\3\3\0\4\3\16\0"+
    "\4\3\1\175\24\3\13\0\1\3\4\0\20\3\3\0"+
    "\4\3\16\0\7\3\1\107\21\3\13\0\1\3\4\0"+
    "\20\3\3\0\4\3\16\0\12\3\1\176\16\3\13\0"+
    "\1\3\4\0\20\3\3\0\4\3\16\0\1\177\30\3"+
    "\13\0\1\3\4\0\20\3\3\0\4\3\16\0\15\3"+
    "\1\200\13\3\13\0\1\3\4\0\16\3\1\164\1\3"+
    "\3\0\4\3\16\0\1\201\7\3\1\107\5\3\1\164"+
    "\12\3\13\0\1\3\4\0\20\3\3\0\4\3\16\0"+
    "\4\3\1\202\24\3\13\0\1\3\4\0\20\3\3\0"+
    "\4\3\16\0\3\3\1\203\23\3\1\204\1\3\13\0"+
    "\1\3\4\0\20\3\3\0\4\3\16\0\2\3\1\126"+
    "\1\205\5\3\1\206\17\3\13\0\1\3\4\0\20\3"+
    "\3\0\4\3\16\0\1\207\13\3\1\210\14\3\13\0"+
    "\1\3\4\0\20\3\3\0\4\3\16\0\6\3\1\211"+
    "\22\3\13\0\1\3\4\0\20\3\3\0\4\3\16\0"+
    "\20\3\1\212\10\3\13\0\1\3\4\0\20\3\3\0"+
    "\4\3\16\0\22\3\1\107\6\3\13\0\1\3\4\0"+
    "\20\3\3\0\4\3\16\0\5\3\1\213\11\3\1\214"+
    "\11\3\13\0\1\3\4\0\20\3\3\0\4\3\16\0"+
    "\12\3\1\107\16\3\13\0\1\3\4\0\20\3\3\0"+
    "\4\3\16\0\2\3\1\215\26\3\13\0\1\3\4\0"+
    "\20\3\3\0\4\3\16\0\13\3\1\216\15\3\13\0"+
    "\1\3\4\0\20\3\3\0\4\3\16\0\7\3\1\217"+
    "\21\3\13\0\1\3\4\0\20\3\3\0\4\3\16\0"+
    "\2\3\1\220\26\3\13\0\1\3\4\0\20\3\3\0"+
    "\4\3\16\0\21\3\1\221\7\3\13\0\1\3\4\0"+
    "\20\3\3\0\4\3\16\0\1\222\30\3\13\0\1\3"+
    "\4\0\20\3\3\0\4\3\16\0\3\3\1\223\11\3"+
    "\1\215\13\3\13\0\1\3\4\0\20\3\3\0\4\3"+
    "\16\0\2\3\1\224\26\3\13\0\1\3\4\0\20\3"+
    "\3\0\4\3\16\0\2\3\1\225\1\226\1\3\1\227"+
    "\23\3\13\0\1\3\4\0\20\3\3\0\4\3\16\0"+
    "\21\3\1\230\7\3\13\0\1\3\4\0\20\3\3\0"+
    "\4\3\16\0\4\3\1\231\24\3\13\0\1\3\4\0"+
    "\20\3\3\0\4\3\16\0\6\3\1\134\22\3\13\0"+
    "\1\3\4\0\20\3\3\0\4\3\16\0\6\3\1\232"+
    "\22\3\13\0\1\3\4\0\20\3\3\0\4\3\16\0"+
    "\14\3\1\233\1\234\13\3\13\0\1\3\4\0\20\3"+
    "\3\0\4\3\16\0\1\3\1\235\27\3\13\0\1\3"+
    "\4\0\20\3\3\0\4\3\16\0\15\3\1\236\13\3"+
    "\13\0\1\3\4\0\20\3\3\0\4\3\16\0\14\3"+
    "\1\237\14\3\13\0\1\3\4\0\20\3\3\0\4\3"+
    "\16\0\3\3\1\216\25\3\13\0\1\3\4\0\20\3"+
    "\3\0\4\3\16\0\13\3\1\240\15\3\13\0\1\3"+
    "\3\0\30\154\1\0\50\154\1\241\1\0\13\154\5\0"+
    "\1\76\16\0\4\155\30\0\1\76\35\0\30\156\1\0"+
    "\5\156\1\0\1\156\1\157\52\156\1\242\2\156\114\0"+
    "\1\243\2\0\14\3\1\164\3\3\3\0\4\3\16\0"+
    "\2\3\1\164\26\3\13\0\1\3\4\0\4\3\1\244"+
    "\13\3\3\0\4\3\16\0\12\3\1\244\16\3\13\0"+
    "\1\3\13\0\1\245\50\0\1\245\34\0\2\246\1\247"+
    "\15\246\1\250\3\246\1\251\1\246\2\251\6\246\1\0"+
    "\10\246\1\247\22\246\1\250\15\246\3\0\27\246\4\170"+
    "\6\246\1\0\51\246\3\0\3\246\24\0\1\167\3\170"+
    "\67\0\2\104\1\252\15\104\3\0\4\104\16\0\5\104"+
    "\1\252\23\104\13\0\1\104\4\0\20\3\3\0\4\3"+
    "\16\0\3\3\1\253\25\3\13\0\1\3\4\0\20\3"+
    "\3\0\4\3\16\0\1\254\30\3\13\0\1\3\4\0"+
    "\20\3\3\0\4\3\16\0\1\255\30\3\13\0\1\3"+
    "\4\0\20\3\3\0\4\3\16\0\3\3\1\256\25\3"+
    "\13\0\1\3\4\0\20\3\3\0\4\3\16\0\3\3"+
    "\1\205\25\3\13\0\1\3\4\0\20\3\3\0\4\3"+
    "\16\0\15\3\1\215\13\3\13\0\1\3\4\0\20\3"+
    "\3\0\4\3\16\0\14\3\1\124\14\3\13\0\1\3"+
    "\4\0\20\3\3\0\4\3\16\0\16\3\1\257\12\3"+
    "\13\0\1\3\4\0\20\3\3\0\4\3\16\0\16\3"+
    "\1\260\12\3\13\0\1\3\4\0\20\3\3\0\4\3"+
    "\16\0\5\3\1\261\23\3\13\0\1\3\4\0\20\3"+
    "\3\0\4\3\16\0\11\3\1\262\17\3\13\0\1\3"+
    "\4\0\20\3\3\0\4\3\16\0\2\3\1\263\26\3"+
    "\13\0\1\3\4\0\20\3\3\0\4\3\16\0\6\3"+
    "\1\126\22\3\13\0\1\3\4\0\20\3\3\0\4\3"+
    "\16\0\2\3\1\215\1\264\25\3\13\0\1\3\4\0"+
    "\20\3\3\0\4\3\16\0\12\3\1\265\16\3\13\0"+
    "\1\3\4\0\20\3\3\0\4\3\16\0\11\3\1\266"+
    "\17\3\13\0\1\3\4\0\20\3\3\0\4\3\16\0"+
    "\1\267\30\3\13\0\1\3\4\0\20\3\3\0\4\3"+
    "\16\0\3\3\1\107\25\3\13\0\1\3\4\0\20\3"+
    "\3\0\4\3\16\0\14\3\1\107\14\3\13\0\1\3"+
    "\4\0\20\3\3\0\4\3\16\0\2\3\1\270\4\3"+
    "\1\271\5\3\1\272\1\3\1\273\2\3\1\47\6\3"+
    "\13\0\1\3\4\0\20\3\3\0\4\3\16\0\12\3"+
    "\1\274\16\3\13\0\1\3\4\0\20\3\3\0\4\3"+
    "\16\0\3\3\1\254\25\3\13\0\1\3\4\0\20\3"+
    "\3\0\4\3\16\0\11\3\1\107\17\3\13\0\1\3"+
    "\4\0\20\3\3\0\4\3\16\0\12\3\1\275\16\3"+
    "\13\0\1\3\4\0\20\3\3\0\4\3\16\0\12\3"+
    "\1\215\16\3\13\0\1\3\4\0\20\3\3\0\4\3"+
    "\16\0\3\3\1\276\25\3\13\0\1\3\4\0\20\3"+
    "\3\0\4\3\16\0\12\3\1\277\16\3\13\0\1\3"+
    "\4\0\20\3\3\0\4\3\16\0\11\3\1\300\17\3"+
    "\13\0\1\3\4\0\20\3\3\0\4\3\16\0\11\3"+
    "\1\301\17\3\13\0\1\3\4\0\20\3\3\0\4\3"+
    "\16\0\12\3\1\302\16\3\13\0\1\3\4\0\20\3"+
    "\3\0\4\3\16\0\5\3\1\303\23\3\13\0\1\3"+
    "\4\0\20\3\3\0\4\3\16\0\3\3\1\304\25\3"+
    "\13\0\1\3\4\0\20\3\3\0\4\3\16\0\6\3"+
    "\1\215\14\3\1\305\5\3\13\0\1\3\4\0\20\3"+
    "\3\0\4\3\16\0\11\3\1\256\17\3\13\0\1\3"+
    "\4\0\20\3\3\0\4\3\16\0\11\3\1\126\17\3"+
    "\13\0\1\3\4\0\20\3\3\0\4\3\16\0\1\3"+
    "\1\134\27\3\13\0\1\3\4\0\20\3\3\0\4\3"+
    "\16\0\1\306\30\3\13\0\1\3\105\0\1\307\26\0"+
    "\1\74\53\0\1\74\52\0\4\246\112\0\1\310\2\246"+
    "\1\310\67\0\6\311\15\0\4\311\16\0\2\311\3\0"+
    "\1\311\1\0\1\311\2\0\1\311\4\0\1\311\30\0"+
    "\24\246\1\251\1\246\2\251\6\246\1\0\51\246\3\0"+
    "\3\246\1\0\11\104\1\312\6\104\3\0\4\104\16\0"+
    "\14\104\1\312\14\104\13\0\1\104\4\0\20\3\3\0"+
    "\4\3\16\0\4\3\1\313\24\3\13\0\1\3\4\0"+
    "\20\3\3\0\4\3\16\0\10\3\1\107\20\3\13\0"+
    "\1\3\4\0\20\3\3\0\4\3\16\0\30\3\1\107"+
    "\13\0\1\3\4\0\20\3\3\0\4\3\16\0\15\3"+
    "\1\314\13\3\13\0\1\3\4\0\20\3\3\0\4\3"+
    "\16\0\4\3\1\315\24\3\13\0\1\3\4\0\20\3"+
    "\3\0\4\3\16\0\15\3\1\316\13\3\13\0\1\3"+
    "\4\0\20\3\3\0\4\3\16\0\13\3\1\107\15\3"+
    "\13\0\1\3\4\0\20\3\3\0\4\3\16\0\1\317"+
    "\30\3\13\0\1\3\4\0\20\3\3\0\4\3\16\0"+
    "\2\3\1\107\26\3\13\0\1\3\4\0\20\3\3\0"+
    "\4\3\16\0\15\3\1\320\13\3\13\0\1\3\4\0"+
    "\20\3\3\0\4\3\16\0\2\3\1\321\26\3\13\0"+
    "\1\3\4\0\20\3\3\0\4\3\16\0\1\322\30\3"+
    "\13\0\1\3\4\0\20\3\3\0\4\3\16\0\16\3"+
    "\1\323\12\3\13\0\1\3\4\0\20\3\3\0\4\3"+
    "\16\0\22\3\1\114\6\3\13\0\1\3\4\0\20\3"+
    "\3\0\4\3\16\0\12\3\1\324\16\3\13\0\1\3"+
    "\4\0\20\3\3\0\4\3\16\0\17\3\1\107\11\3"+
    "\13\0\1\3\4\0\20\3\3\0\4\3\16\0\14\3"+
    "\1\141\14\3\13\0\1\3\4\0\20\3\3\0\4\3"+
    "\16\0\15\3\1\272\13\3\13\0\1\3\4\0\20\3"+
    "\3\0\4\3\16\0\6\3\1\325\22\3\13\0\1\3"+
    "\4\0\20\3\3\0\4\3\16\0\1\326\11\3\1\327"+
    "\16\3\13\0\1\3\4\0\20\3\3\0\4\3\16\0"+
    "\4\3\1\330\24\3\13\0\1\3\4\0\20\3\3\0"+
    "\4\3\16\0\16\3\1\331\12\3\13\0\1\3\4\0"+
    "\20\3\3\0\4\3\16\0\12\3\1\332\16\3\13\0"+
    "\1\3\4\0\20\3\3\0\4\3\16\0\1\205\30\3"+
    "\13\0\1\3\4\0\20\3\3\0\4\3\16\0\3\3"+
    "\1\333\25\3\13\0\1\3\4\0\20\3\3\0\4\3"+
    "\16\0\12\3\1\334\16\3\13\0\1\3\4\0\20\3"+
    "\3\0\4\3\16\0\1\335\30\3\13\0\1\3\4\0"+
    "\20\3\3\0\4\3\16\0\11\3\1\336\17\3\13\0"+
    "\1\3\3\0\24\246\1\310\2\246\1\310\6\246\1\0"+
    "\51\246\3\0\4\246\6\311\15\246\4\311\6\246\1\0"+
    "\7\246\2\311\3\246\1\311\1\246\1\311\2\246\1\311"+
    "\4\246\1\311\22\246\3\0\3\246\1\0\13\104\1\337"+
    "\4\104\3\0\4\104\16\0\4\104\1\337\24\104\13\0"+
    "\1\104\4\0\20\3\3\0\4\3\16\0\1\340\30\3"+
    "\13\0\1\3\4\0\20\3\3\0\4\3\16\0\5\3"+
    "\1\107\23\3\13\0\1\3\4\0\20\3\3\0\4\3"+
    "\16\0\6\3\1\107\22\3\13\0\1\3\4\0\20\3"+
    "\3\0\4\3\16\0\4\3\1\341\24\3\13\0\1\3"+
    "\4\0\20\3\3\0\4\3\16\0\1\3\1\236\27\3"+
    "\13\0\1\3\4\0\20\3\3\0\4\3\16\0\6\3"+
    "\1\342\22\3\13\0\1\3\4\0\20\3\3\0\4\3"+
    "\16\0\21\3\1\343\7\3\13\0\1\3\4\0\20\3"+
    "\3\0\4\3\16\0\4\3\1\126\24\3\13\0\1\3"+
    "\4\0\20\3\3\0\4\3\16\0\11\3\1\215\17\3"+
    "\13\0\1\3\4\0\20\3\3\0\4\3\16\0\5\3"+
    "\1\213\23\3\13\0\1\3\4\0\20\3\3\0\4\3"+
    "\16\0\7\3\1\263\21\3\13\0\1\3\4\0\20\3"+
    "\3\0\4\3\16\0\6\3\1\344\22\3\13\0\1\3"+
    "\4\0\20\3\3\0\4\3\16\0\1\345\30\3\13\0"+
    "\1\3\4\0\20\3\3\0\4\3\16\0\17\3\1\343"+
    "\11\3\13\0\1\3\4\0\20\3\3\0\4\3\16\0"+
    "\7\3\1\341\21\3\13\0\1\3\4\0\20\3\3\0"+
    "\4\3\16\0\20\3\1\346\10\3\13\0\1\3\4\0"+
    "\20\3\3\0\4\3\16\0\15\3\1\347\13\3\13\0"+
    "\1\3\4\0\20\3\3\0\4\3\16\0\5\3\1\350"+
    "\23\3\13\0\1\3\4\0\20\3\3\0\4\3\16\0"+
    "\3\3\1\126\25\3\13\0\1\3\4\0\20\3\3\0"+
    "\4\3\16\0\3\3\1\351\25\3\13\0\1\3\4\0"+
    "\3\104\1\352\14\104\3\0\4\104\16\0\7\104\1\352"+
    "\21\104\13\0\1\104\4\0\20\3\3\0\4\3\16\0"+
    "\5\3\1\215\23\3\13\0\1\3\4\0\20\3\3\0"+
    "\4\3\16\0\12\3\1\353\16\3\13\0\1\3\4\0"+
    "\20\3\3\0\4\3\16\0\16\3\1\126\12\3\13\0"+
    "\1\3\4\0\20\3\3\0\4\3\16\0\1\354\30\3"+
    "\13\0\1\3\4\0\20\3\3\0\4\3\16\0\5\3"+
    "\1\355\23\3\13\0\1\3\4\0\20\3\3\0\4\3"+
    "\16\0\7\3\1\356\21\3\13\0\1\3\4\0\20\3"+
    "\3\0\4\3\16\0\12\3\1\357\16\3\13\0\1\3"+
    "\4\0\20\3\3\0\4\3\16\0\14\3\1\315\14\3"+
    "\13\0\1\3\4\0\20\3\3\0\4\3\16\0\3\3"+
    "\1\360\25\3\13\0\1\3\4\0\20\3\3\0\4\3"+
    "\16\0\26\3\1\361\2\3\13\0\1\3\4\0\14\104"+
    "\1\362\3\104\3\0\4\104\16\0\2\104\1\362\26\104"+
    "\13\0\1\104\4\0\20\3\3\0\4\3\16\0\26\3"+
    "\1\363\2\3\13\0\1\3\4\0\20\3\3\0\4\3"+
    "\16\0\5\3\1\126\23\3\13\0\1\3\4\0\20\3"+
    "\3\0\4\3\16\0\12\3\1\356\16\3\13\0\1\3"+
    "\4\0\20\3\3\0\4\3\16\0\14\3\1\272\14\3"+
    "\13\0\1\3\4\0\20\3\3\0\4\3\16\0\6\3"+
    "\1\364\22\3\13\0\1\3\4\0\20\3\3\0\4\3"+
    "\16\0\12\3\1\111\16\3\13\0\1\3\4\0\20\3"+
    "\3\0\4\3\16\0\5\3\1\365\23\3\13\0\1\3"+
    "\4\0\4\104\1\366\13\104\3\0\4\104\16\0\12\104"+
    "\1\366\16\104\13\0\1\104\4\0\20\3\3\0\4\3"+
    "\16\0\14\3\1\367\14\3\13\0\1\3\4\0\20\3"+
    "\3\0\4\3\16\0\3\3\1\263\25\3\13\0\1\3"+
    "\4\0\20\3\3\0\4\3\16\0\14\3\1\370\14\3"+
    "\13\0\1\3\4\0\15\104\1\371\2\104\3\0\4\104"+
    "\16\0\3\104\1\371\25\104\13\0\1\104\4\0\20\3"+
    "\3\0\4\3\16\0\6\3\1\354\22\3\13\0\1\3"+
    "\4\0\20\3\3\0\4\3\16\0\20\3\1\372\10\3"+
    "\13\0\1\3\4\0\20\104\3\0\4\104\1\0\1\373"+
    "\14\0\31\104\13\0\1\104\4\0\20\3\3\0\4\3"+
    "\16\0\21\3\1\374\7\3\13\0\1\3\116\0\1\375"+
    "\1\376\2\0\20\3\3\0\4\3\16\0\15\3\1\377"+
    "\13\3\13\0\1\3\3\0\30\375\1\0\5\375\1\0"+
    "\1\375\1\u0100\52\375\1\u0101\2\375\30\0\1\u0102\5\0"+
    "\1\u0102\1\0\2\u0102\3\0\1\u0102\46\0\1\u0103\2\0"+
    "\20\3\3\0\4\3\16\0\11\3\1\u0104\17\3\13\0"+
    "\1\3\3\0\30\375\1\0\5\375\1\0\1\375\1\u0100"+
    "\52\375\1\u0105\2\375\32\0\1\u0106\177\0\1\376\33\0"+
    "\1\u0106\61\0\1\376\2\0\20\3\3\0\4\3\16\0"+
    "\12\3\1\42\16\3\13\0\1\3\3\0\30\375\1\0"+
    "\1\375\1\u0107\3\375\1\0\1\375\1\u0100\52\375\1\u0101"+
    "\2\375";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18174];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\5\11\2\1\1\11\1\1\2\11"+
    "\1\1\1\11\30\1\1\11\11\1\1\0\2\11\3\0"+
    "\2\1\1\0\1\11\46\1\2\11\1\0\1\1\2\0"+
    "\1\11\1\0\3\1\1\0\3\1\1\0\47\1\1\0"+
    "\1\1\1\0\1\1\1\0\41\1\1\11\63\1\1\0"+
    "\1\1\2\0\1\1\4\0\1\1\1\0\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[263];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String myLexer;
public int countLine = 0;
public int chars = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 238) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { chars += yytext().length(); myLexer = yytext();return ERROR;
            }
          case 32: break;
          case 2: 
            { chars += yytext().length(); myLexer=yytext(); return CONSTANT;
            }
          case 33: break;
          case 3: 
            { chars += yytext().length(); myLexer=yytext(); return COMPOPERATOR;
            }
          case 34: break;
          case 4: 
            { chars += yytext().length(); myLexer=yytext(); return QMARK;
            }
          case 35: break;
          case 5: 
            { chars += yytext().length(); myLexer=yytext(); return INT;
            }
          case 36: break;
          case 6: 
            { chars += yytext().length(); myLexer=yytext(); return PARENTHESIS;
            }
          case 37: break;
          case 7: 
            { chars += yytext().length(); myLexer=yytext(); return BRACKETS;
            }
          case 38: break;
          case 8: 
            { chars += yytext().length(); myLexer=yytext(); return KEYS;
            }
          case 39: break;
          case 9: 
            { chars += yytext().length(); myLexer=yytext(); return COMA;
            }
          case 40: break;
          case 10: 
            { chars += yytext().length(); myLexer=yytext(); return SEMICOLON;
            }
          case 41: break;
          case 11: 
            { chars = 0; countLine++; myLexer="\n"; return NEWLINE;
            }
          case 42: break;
          case 12: 
            { chars += yytext().length(); myLexer=yytext(); return BLANKSPACE;
            }
          case 43: break;
          case 13: 
            { chars += yytext().length(); myLexer=yytext(); return SCAPE;
            }
          case 44: break;
          case 14: 
            { chars += yytext().length(); myLexer=yytext(); return SPLIT;
            }
          case 45: break;
          case 15: 
            { chars += yytext().length(); myLexer=yytext(); return TWOPOINTS;
            }
          case 46: break;
          case 16: 
            { chars += yytext().length(); myLexer=yytext(); return AT;
            }
          case 47: break;
          case 17: 
            { chars += yytext().length(); myLexer=yytext(); return DOLLAR;
            }
          case 48: break;
          case 18: 
            { chars += yytext().length(); myLexer=yytext(); return POWER;
            }
          case 49: break;
          case 19: 
            { chars += yytext().length(); myLexer=yytext(); return AROPERATOR;
            }
          case 50: break;
          case 20: 
            { chars += yytext().length(); myLexer=yytext(); return LOGOPERATOR;
            }
          case 51: break;
          case 21: 
            { chars += yytext().length(); myLexer=yytext(); return ASSIGNOPERATOR;
            }
          case 52: break;
          case 22: 
            { chars += yytext().length(); myLexer=yytext(); return CONCAT;
            }
          case 53: break;
          case 23: 
            { chars += yytext().length(); if(yytext().contains("\n")){chars=0; countLine++;} myLexer=yytext(); return COMMENT;
            }
          case 54: break;
          case 24: 
            { chars += yytext().length(); myLexer=yytext(); return PHP;
            }
          case 55: break;
          case 25: 
            { chars += yytext().length(); myLexer=yytext(); return DOUBLE;
            }
          case 56: break;
          case 26: 
            { chars += yytext().length(); myLexer=yytext(); return IDVAR;
            }
          case 57: break;
          case 27: 
            { chars += yytext().length(); myLexer=yytext(); return RESERVEDWORDS;
            }
          case 58: break;
          case 28: 
            { chars += yytext().length(); myLexer=yytext(); return INCDECOPERATOR;
            }
          case 59: break;
          case 29: 
            { chars += yytext().length(); myLexer=yytext(); return STRING;
            }
          case 60: break;
          case 30: 
            { chars += yytext().length(); myLexer=yytext(); return BOOL;
            }
          case 61: break;
          case 31: 
            { chars += yytext().length(); myLexer=yytext(); return DB;
            }
          case 62: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
