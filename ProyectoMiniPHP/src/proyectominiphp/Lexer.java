/* The following code was generated by JFlex 1.6.1 */

package proyectominiphp;

import static proyectominiphp.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/DELL/Desktop/ProyectoAnalizadorLexico/ProyectoMiniPHP/src/proyectominiphp/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\40\1\37\1\107\1\107\1\106\22\0\1\40\1\77\1\113"+
    "\1\116\1\114\1\76\1\100\1\111\1\31\1\31\1\74\1\72\1\35"+
    "\1\73\1\103\1\75\1\25\1\30\6\27\2\26\1\115\1\36\1\22"+
    "\1\102\1\24\1\23\1\105\1\1\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\7\1\7\1\7\1\11\1\7\1\12\1\13\1\14"+
    "\1\7\1\15\1\16\1\17\1\20\1\7\1\7\1\21\1\7\1\7"+
    "\1\32\1\112\1\33\1\104\1\67\1\0\1\41\1\42\1\46\1\50"+
    "\1\53\1\60\1\66\1\54\1\56\1\7\1\71\1\52\1\61\1\47"+
    "\1\55\1\62\1\70\1\45\1\43\1\44\1\57\1\64\1\63\1\65"+
    "\1\51\1\7\1\34\1\101\1\34\1\0\6\7\1\110\172\7\u1f28\0"+
    "\1\107\1\107\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\6\2\1\3\1\4\1\3\2\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\24\2\5\15"+
    "\1\16\1\1\2\17\1\20\1\17\1\21\3\1\1\4"+
    "\1\22\2\2\1\16\1\2\1\0\1\3\1\23\4\1"+
    "\1\5\1\24\2\0\1\2\1\25\43\2\1\26\1\17"+
    "\1\15\1\0\1\16\1\24\1\0\1\27\3\0\2\30"+
    "\2\2\1\0\1\5\2\24\1\0\1\5\35\2\1\25"+
    "\7\2\1\0\1\30\1\31\1\0\4\24\21\2\1\25"+
    "\12\2\1\22\1\30\2\24\24\2\1\30\12\2\1\30"+
    "\1\25\6\2\1\30\4\2\1\30\2\2\1\30\1\2"+
    "\1\30\1\2\1\0\1\2\2\0\1\2\3\0\1\32";

  private static int [] zzUnpackAction() {
    int [] result = new int[267];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\117\0\236\0\355\0\u013c\0\u018b\0\u01da\0\u0229"+
    "\0\u0278\0\u02c7\0\u0316\0\u0365\0\u03b4\0\117\0\117\0\117"+
    "\0\117\0\117\0\u0403\0\u0452\0\u04a1\0\u04f0\0\u053f\0\u058e"+
    "\0\u05dd\0\u062c\0\u067b\0\u06ca\0\u0719\0\u0768\0\u07b7\0\u0806"+
    "\0\u0855\0\u08a4\0\u08f3\0\u0942\0\u0991\0\u09e0\0\u0a2f\0\u0a7e"+
    "\0\u0acd\0\u0b1c\0\u0b6b\0\u0bba\0\u0c09\0\u0c58\0\u0ca7\0\u0cf6"+
    "\0\u0c58\0\u0d45\0\u0c09\0\117\0\u0d94\0\u0de3\0\u0e32\0\117"+
    "\0\u0e81\0\u0ed0\0\u0f1f\0\355\0\u0f6e\0\u0fbd\0\117\0\117"+
    "\0\u100c\0\u105b\0\u10aa\0\u10f9\0\u1148\0\u1197\0\u11e6\0\u1235"+
    "\0\u1284\0\355\0\u12d3\0\u1322\0\u1371\0\u13c0\0\u140f\0\u145e"+
    "\0\u14ad\0\u14fc\0\u154b\0\u159a\0\u15e9\0\u1638\0\u1687\0\u16d6"+
    "\0\u1725\0\u1774\0\u17c3\0\u1812\0\u1861\0\u18b0\0\u18ff\0\u194e"+
    "\0\u199d\0\u19ec\0\u1a3b\0\u1a8a\0\u1ad9\0\u1b28\0\u1b77\0\u1bc6"+
    "\0\u1c15\0\u1c64\0\u1cb3\0\u1d02\0\u1d51\0\117\0\117\0\117"+
    "\0\u1da0\0\117\0\u1def\0\u0d94\0\117\0\u1e3e\0\u0de3\0\u1e8d"+
    "\0\u1edc\0\u1f2b\0\u1f7a\0\u1fc9\0\u2018\0\u2067\0\u20b6\0\u2105"+
    "\0\u2154\0\u21a3\0\u21f2\0\u2241\0\u2290\0\u22df\0\u232e\0\u237d"+
    "\0\u23cc\0\u241b\0\u246a\0\u24b9\0\u2508\0\u2557\0\u25a6\0\u25f5"+
    "\0\u2644\0\u2693\0\u26e2\0\u2731\0\u2780\0\u27cf\0\u281e\0\u286d"+
    "\0\u28bc\0\u290b\0\u295a\0\u29a9\0\u29f8\0\u2a47\0\u2a96\0\u2ae5"+
    "\0\u2b34\0\u2b83\0\u2bd2\0\u2c21\0\u2c70\0\u2cbf\0\u2d0e\0\u2d5d"+
    "\0\u2dac\0\355\0\u2dfb\0\u2e4a\0\u2e99\0\u2ee8\0\u2f37\0\u2f86"+
    "\0\u2fd5\0\u3024\0\u3073\0\u30c2\0\u3111\0\u3160\0\u31af\0\u31fe"+
    "\0\u324d\0\u329c\0\u32eb\0\u333a\0\u3389\0\u33d8\0\u3427\0\u3476"+
    "\0\u34c5\0\u3514\0\u3563\0\u35b2\0\u3601\0\u3650\0\u369f\0\u36ee"+
    "\0\u373d\0\u378c\0\u37db\0\117\0\u382a\0\u3879\0\u38c8\0\u3917"+
    "\0\u3966\0\u39b5\0\u3a04\0\u3a53\0\u3aa2\0\u3af1\0\u3b40\0\u3b8f"+
    "\0\u3bde\0\u3c2d\0\u3c7c\0\u3ccb\0\u3d1a\0\u3d69\0\u3db8\0\u3e07"+
    "\0\u3e56\0\u3ea5\0\u3ef4\0\u3f43\0\u3f92\0\u3fe1\0\u4030\0\u407f"+
    "\0\u40ce\0\u411d\0\u416c\0\u41bb\0\u420a\0\u4259\0\u42a8\0\u42f7"+
    "\0\u4346\0\u4395\0\u43e4\0\u4433\0\u4482\0\u44d1\0\u4520\0\u456f"+
    "\0\u45be\0\u460d\0\u465c\0\u46ab\0\u46fa\0\u4749\0\u4798\0\u47e7"+
    "\0\u4836\0\u4885\0\u48d4\0\u4923\0\u4972\0\u49c1\0\u4a10\0\u4a5f"+
    "\0\u4aae\0\u4afd\0\117";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[267];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\4\4\1\5\4\4\1\6\3\4\1\7"+
    "\1\4\1\10\1\11\1\12\1\13\1\14\3\15\1\16"+
    "\2\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\4\1\35"+
    "\1\36\1\4\1\37\1\40\1\41\1\42\1\4\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\2\4\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\24\1\0\1\4\1\65\1\2\1\66"+
    "\1\67\1\70\1\71\120\0\11\4\1\72\7\4\3\0"+
    "\4\4\10\0\6\4\1\72\22\4\16\0\1\4\7\0"+
    "\21\4\3\0\4\4\10\0\31\4\16\0\1\4\7\0"+
    "\1\73\20\4\3\0\4\4\10\0\1\73\30\4\16\0"+
    "\1\4\7\0\14\4\1\74\4\4\3\0\4\4\10\0"+
    "\4\4\1\74\24\4\16\0\1\4\7\0\14\4\1\75"+
    "\4\4\3\0\4\4\10\0\4\4\1\75\24\4\16\0"+
    "\1\4\7\0\12\4\1\6\6\4\3\0\4\4\10\0"+
    "\14\4\1\6\14\4\16\0\1\4\30\0\1\63\1\76"+
    "\56\0\1\77\40\0\1\100\116\0\1\63\55\0\1\77"+
    "\15\0\1\101\1\102\2\101\1\103\13\101\1\104\3\0"+
    "\1\105\1\106\2\105\10\0\1\101\1\102\10\101\1\103"+
    "\11\101\1\104\4\101\11\0\1\107\4\0\1\101\3\0"+
    "\1\110\3\0\4\101\1\103\14\101\3\0\4\15\10\0"+
    "\12\101\1\103\16\101\11\0\1\107\4\0\1\101\3\0"+
    "\1\110\41\0\1\23\117\0\1\24\45\0\1\24\11\0"+
    "\11\4\1\72\7\4\3\0\4\4\10\0\1\4\1\111"+
    "\1\112\1\4\1\113\1\4\1\114\22\4\16\0\1\4"+
    "\7\0\21\4\3\0\4\4\10\0\4\4\1\115\24\4"+
    "\16\0\1\4\7\0\21\4\3\0\4\4\10\0\3\4"+
    "\1\116\16\4\1\117\6\4\16\0\1\4\7\0\14\4"+
    "\1\75\4\4\3\0\4\4\10\0\4\4\1\120\6\4"+
    "\1\121\15\4\16\0\1\4\7\0\21\4\3\0\4\4"+
    "\10\0\12\4\1\122\16\4\16\0\1\4\7\0\21\4"+
    "\3\0\4\4\10\0\1\123\10\4\1\124\2\4\1\125"+
    "\14\4\16\0\1\4\7\0\21\4\3\0\4\4\10\0"+
    "\1\126\11\4\1\127\16\4\16\0\1\4\7\0\21\4"+
    "\3\0\4\4\10\0\12\4\1\130\1\4\1\112\1\131"+
    "\13\4\16\0\1\4\7\0\21\4\3\0\4\4\10\0"+
    "\15\4\1\132\13\4\16\0\1\4\7\0\21\4\3\0"+
    "\4\4\10\0\5\4\1\133\1\134\2\4\1\135\6\4"+
    "\1\136\2\4\1\137\1\140\4\4\16\0\1\4\7\0"+
    "\14\4\1\74\4\4\3\0\4\4\10\0\4\4\1\112"+
    "\24\4\16\0\1\4\7\0\21\4\3\0\4\4\10\0"+
    "\2\4\1\141\3\4\1\142\10\4\1\112\1\143\10\4"+
    "\16\0\1\4\7\0\21\4\3\0\4\4\10\0\2\4"+
    "\1\131\3\4\1\141\22\4\16\0\1\4\7\0\1\73"+
    "\20\4\3\0\4\4\10\0\1\73\13\4\1\144\1\145"+
    "\1\146\12\4\16\0\1\4\7\0\21\4\3\0\4\4"+
    "\10\0\4\4\1\147\11\4\1\150\12\4\16\0\1\4"+
    "\7\0\21\4\3\0\4\4\10\0\13\4\1\151\15\4"+
    "\16\0\1\4\7\0\21\4\3\0\4\4\10\0\1\152"+
    "\30\4\16\0\1\4\7\0\12\4\1\6\6\4\3\0"+
    "\4\4\10\0\14\4\1\37\14\4\16\0\1\4\7\0"+
    "\21\4\3\0\4\4\10\0\11\4\1\153\2\4\1\154"+
    "\14\4\16\0\1\4\7\0\21\4\3\0\4\4\10\0"+
    "\26\4\1\155\2\4\16\0\1\4\33\0\1\14\3\15"+
    "\41\0\1\156\7\0\1\157\1\107\40\0\1\14\3\15"+
    "\42\0\1\156\6\0\1\157\1\107\107\0\1\160\5\0"+
    "\1\157\110\0\1\161\1\71\4\0\1\157\116\0\1\157"+
    "\116\0\1\77\114\0\1\162\1\0\1\157\115\0\1\162"+
    "\1\157\41\0\4\163\51\0\1\157\14\0\37\164\1\0"+
    "\51\164\1\165\1\166\4\164\37\167\1\0\52\167\1\170"+
    "\1\165\3\167\1\0\14\171\1\172\4\171\17\0\4\171"+
    "\1\172\24\171\16\0\1\171\6\0\37\71\1\0\46\71"+
    "\3\0\6\71\1\0\3\4\1\74\15\4\3\0\4\4"+
    "\10\0\7\4\1\74\21\4\16\0\1\4\7\0\10\4"+
    "\1\173\10\4\3\0\4\4\10\0\11\4\1\173\17\4"+
    "\16\0\1\4\7\0\17\4\1\174\1\4\3\0\4\4"+
    "\10\0\16\4\1\174\12\4\16\0\1\4\22\0\1\175"+
    "\45\0\1\175\35\0\21\101\3\0\4\101\10\0\31\101"+
    "\16\0\1\101\7\0\21\101\3\0\1\176\2\101\1\176"+
    "\10\0\31\101\16\0\1\101\7\0\21\101\3\0\1\177"+
    "\3\200\10\0\31\101\2\201\14\0\1\101\7\0\6\202"+
    "\13\101\3\0\4\202\10\0\2\202\3\101\1\202\1\101"+
    "\1\202\2\101\1\202\4\101\1\202\11\101\16\0\1\101"+
    "\7\0\4\101\1\103\14\101\3\0\1\105\1\106\2\105"+
    "\10\0\12\101\1\103\16\101\11\0\1\107\4\0\1\101"+
    "\3\0\1\110\3\0\4\101\1\103\14\101\3\0\4\106"+
    "\10\0\12\101\1\103\16\101\11\0\1\107\4\0\1\101"+
    "\3\0\1\110\27\0\4\163\67\0\21\101\17\0\31\101"+
    "\16\0\1\101\7\0\21\4\3\0\4\4\10\0\2\4"+
    "\1\203\26\4\16\0\1\4\7\0\21\4\3\0\4\4"+
    "\10\0\4\4\1\204\24\4\16\0\1\4\7\0\3\4"+
    "\1\74\15\4\3\0\4\4\10\0\7\4\1\112\21\4"+
    "\16\0\1\4\7\0\21\4\3\0\4\4\10\0\12\4"+
    "\1\205\16\4\16\0\1\4\7\0\21\4\3\0\4\4"+
    "\10\0\1\206\30\4\16\0\1\4\7\0\21\4\3\0"+
    "\4\4\10\0\15\4\1\207\13\4\16\0\1\4\7\0"+
    "\17\4\1\174\1\4\3\0\4\4\10\0\1\210\7\4"+
    "\1\112\5\4\1\174\12\4\16\0\1\4\7\0\21\4"+
    "\3\0\4\4\10\0\4\4\1\211\24\4\16\0\1\4"+
    "\7\0\21\4\3\0\4\4\10\0\3\4\1\212\23\4"+
    "\1\213\1\4\16\0\1\4\7\0\21\4\3\0\4\4"+
    "\10\0\2\4\1\131\1\214\5\4\1\215\17\4\16\0"+
    "\1\4\7\0\21\4\3\0\4\4\10\0\1\216\13\4"+
    "\1\217\14\4\16\0\1\4\7\0\21\4\3\0\4\4"+
    "\10\0\6\4\1\220\22\4\16\0\1\4\7\0\21\4"+
    "\3\0\4\4\10\0\20\4\1\221\10\4\16\0\1\4"+
    "\7\0\21\4\3\0\4\4\10\0\22\4\1\112\6\4"+
    "\16\0\1\4\7\0\21\4\3\0\4\4\10\0\5\4"+
    "\1\222\11\4\1\223\11\4\16\0\1\4\7\0\21\4"+
    "\3\0\4\4\10\0\12\4\1\112\16\4\16\0\1\4"+
    "\7\0\21\4\3\0\4\4\10\0\2\4\1\224\26\4"+
    "\16\0\1\4\7\0\21\4\3\0\4\4\10\0\13\4"+
    "\1\225\15\4\16\0\1\4\7\0\21\4\3\0\4\4"+
    "\10\0\7\4\1\226\21\4\16\0\1\4\7\0\21\4"+
    "\3\0\4\4\10\0\2\4\1\227\26\4\16\0\1\4"+
    "\7\0\21\4\3\0\4\4\10\0\21\4\1\230\7\4"+
    "\16\0\1\4\7\0\21\4\3\0\4\4\10\0\1\231"+
    "\30\4\16\0\1\4\7\0\21\4\3\0\4\4\10\0"+
    "\3\4\1\232\11\4\1\224\13\4\16\0\1\4\7\0"+
    "\21\4\3\0\4\4\10\0\2\4\1\233\26\4\16\0"+
    "\1\4\7\0\21\4\3\0\4\4\10\0\2\4\1\234"+
    "\1\235\1\4\1\236\23\4\16\0\1\4\7\0\21\4"+
    "\3\0\4\4\10\0\21\4\1\237\7\4\16\0\1\4"+
    "\7\0\21\4\3\0\4\4\10\0\4\4\1\240\24\4"+
    "\16\0\1\4\7\0\21\4\3\0\4\4\10\0\6\4"+
    "\1\137\22\4\16\0\1\4\7\0\21\4\3\0\4\4"+
    "\10\0\6\4\1\241\22\4\16\0\1\4\7\0\21\4"+
    "\3\0\4\4\10\0\14\4\1\242\1\243\13\4\16\0"+
    "\1\4\7\0\21\4\3\0\4\4\10\0\1\4\1\244"+
    "\27\4\16\0\1\4\7\0\21\4\3\0\4\4\10\0"+
    "\15\4\1\245\13\4\16\0\1\4\7\0\21\4\3\0"+
    "\4\4\10\0\4\4\1\112\24\4\16\0\1\4\7\0"+
    "\21\4\3\0\4\4\10\0\14\4\1\246\14\4\16\0"+
    "\1\4\7\0\21\4\3\0\4\4\10\0\3\4\1\225"+
    "\25\4\16\0\1\4\7\0\21\4\3\0\4\4\10\0"+
    "\13\4\1\247\15\4\16\0\1\4\6\0\31\161\1\0"+
    "\42\161\1\250\1\0\21\161\1\0\4\101\1\103\14\101"+
    "\3\0\4\163\10\0\12\101\1\103\16\101\16\0\1\101"+
    "\3\0\1\110\2\0\37\164\1\0\46\164\3\0\6\164"+
    "\37\167\1\0\46\167\3\0\6\167\1\0\21\171\3\0"+
    "\4\171\10\0\31\171\16\0\1\171\7\0\4\171\1\251"+
    "\14\171\3\0\4\171\10\0\12\171\1\251\16\171\16\0"+
    "\1\171\7\0\15\4\1\174\3\4\3\0\4\4\10\0"+
    "\2\4\1\174\26\4\16\0\1\4\7\0\4\4\1\252"+
    "\14\4\3\0\4\4\10\0\12\4\1\252\16\4\16\0"+
    "\1\4\16\0\1\253\43\0\1\253\43\0\21\101\3\0"+
    "\1\176\2\101\1\176\10\0\31\101\16\0\1\101\3\0"+
    "\1\110\2\0\2\254\1\255\16\254\1\256\3\254\1\257"+
    "\1\254\2\257\6\254\1\0\2\254\1\255\22\254\1\256"+
    "\20\254\2\0\1\101\33\254\4\200\6\254\1\0\46\254"+
    "\2\0\1\101\6\254\25\0\1\177\3\200\67\0\6\202"+
    "\13\101\3\0\4\202\10\0\2\202\3\101\1\202\1\101"+
    "\1\202\2\101\1\202\4\101\1\202\11\101\16\0\1\101"+
    "\3\0\1\110\3\0\21\4\3\0\4\4\10\0\3\4"+
    "\1\260\25\4\16\0\1\4\7\0\21\4\3\0\4\4"+
    "\10\0\1\261\30\4\16\0\1\4\7\0\21\4\3\0"+
    "\4\4\10\0\1\262\30\4\16\0\1\4\7\0\21\4"+
    "\3\0\4\4\10\0\3\4\1\263\25\4\16\0\1\4"+
    "\7\0\21\4\3\0\4\4\10\0\3\4\1\214\25\4"+
    "\16\0\1\4\7\0\21\4\3\0\4\4\10\0\15\4"+
    "\1\224\13\4\16\0\1\4\7\0\21\4\3\0\4\4"+
    "\10\0\14\4\1\127\14\4\16\0\1\4\7\0\21\4"+
    "\3\0\4\4\10\0\16\4\1\264\12\4\16\0\1\4"+
    "\7\0\21\4\3\0\4\4\10\0\16\4\1\265\12\4"+
    "\16\0\1\4\7\0\21\4\3\0\4\4\10\0\5\4"+
    "\1\266\23\4\16\0\1\4\7\0\21\4\3\0\4\4"+
    "\10\0\11\4\1\267\17\4\16\0\1\4\7\0\21\4"+
    "\3\0\4\4\10\0\2\4\1\270\26\4\16\0\1\4"+
    "\7\0\21\4\3\0\4\4\10\0\6\4\1\131\22\4"+
    "\16\0\1\4\7\0\21\4\3\0\4\4\10\0\2\4"+
    "\1\224\1\271\25\4\16\0\1\4\7\0\21\4\3\0"+
    "\4\4\10\0\12\4\1\272\16\4\16\0\1\4\7\0"+
    "\21\4\3\0\4\4\10\0\11\4\1\273\17\4\16\0"+
    "\1\4\7\0\21\4\3\0\4\4\10\0\1\274\30\4"+
    "\16\0\1\4\7\0\21\4\3\0\4\4\10\0\3\4"+
    "\1\112\25\4\16\0\1\4\7\0\21\4\3\0\4\4"+
    "\10\0\14\4\1\112\14\4\16\0\1\4\7\0\21\4"+
    "\3\0\4\4\10\0\2\4\1\275\4\4\1\276\5\4"+
    "\1\277\1\4\1\300\2\4\1\44\6\4\16\0\1\4"+
    "\7\0\21\4\3\0\4\4\10\0\12\4\1\301\16\4"+
    "\16\0\1\4\7\0\21\4\3\0\4\4\10\0\3\4"+
    "\1\261\25\4\16\0\1\4\7\0\21\4\3\0\4\4"+
    "\10\0\11\4\1\112\17\4\16\0\1\4\7\0\21\4"+
    "\3\0\4\4\10\0\12\4\1\302\16\4\16\0\1\4"+
    "\7\0\21\4\3\0\4\4\10\0\12\4\1\224\16\4"+
    "\16\0\1\4\7\0\21\4\3\0\4\4\10\0\3\4"+
    "\1\303\25\4\16\0\1\4\7\0\21\4\3\0\4\4"+
    "\10\0\12\4\1\304\16\4\16\0\1\4\7\0\21\4"+
    "\3\0\4\4\10\0\11\4\1\305\17\4\16\0\1\4"+
    "\7\0\21\4\3\0\4\4\10\0\11\4\1\306\17\4"+
    "\16\0\1\4\7\0\21\4\3\0\4\4\10\0\12\4"+
    "\1\307\16\4\16\0\1\4\7\0\21\4\3\0\4\4"+
    "\10\0\5\4\1\310\23\4\16\0\1\4\7\0\21\4"+
    "\3\0\4\4\10\0\3\4\1\311\25\4\16\0\1\4"+
    "\7\0\21\4\3\0\4\4\10\0\6\4\1\224\14\4"+
    "\1\312\5\4\16\0\1\4\7\0\21\4\3\0\4\4"+
    "\10\0\11\4\1\263\17\4\16\0\1\4\7\0\21\4"+
    "\3\0\4\4\10\0\11\4\1\131\17\4\16\0\1\4"+
    "\7\0\21\4\3\0\4\4\10\0\1\4\1\137\27\4"+
    "\16\0\1\4\7\0\21\4\3\0\4\4\10\0\1\313"+
    "\30\4\16\0\1\4\103\0\1\314\22\0\2\171\1\315"+
    "\16\171\3\0\4\171\10\0\5\171\1\315\23\171\16\0"+
    "\1\171\22\0\1\100\45\0\1\100\35\0\21\101\3\0"+
    "\4\254\10\0\31\101\16\0\1\101\3\0\1\110\3\0"+
    "\21\101\3\0\1\316\2\254\1\316\10\0\31\101\16\0"+
    "\1\101\3\0\1\110\3\0\6\317\13\101\3\0\4\317"+
    "\10\0\2\317\3\101\1\317\1\101\1\317\2\101\1\317"+
    "\4\101\1\317\11\101\16\0\1\101\3\0\1\110\2\0"+
    "\25\254\1\257\1\254\2\257\6\254\1\0\46\254\2\0"+
    "\1\101\6\254\1\0\21\4\3\0\4\4\10\0\4\4"+
    "\1\320\24\4\16\0\1\4\7\0\21\4\3\0\4\4"+
    "\10\0\10\4\1\112\20\4\16\0\1\4\7\0\21\4"+
    "\3\0\4\4\10\0\30\4\1\112\16\0\1\4\7\0"+
    "\21\4\3\0\4\4\10\0\15\4\1\321\13\4\16\0"+
    "\1\4\7\0\21\4\3\0\4\4\10\0\4\4\1\322"+
    "\24\4\16\0\1\4\7\0\21\4\3\0\4\4\10\0"+
    "\15\4\1\323\13\4\16\0\1\4\7\0\21\4\3\0"+
    "\4\4\10\0\13\4\1\112\15\4\16\0\1\4\7\0"+
    "\21\4\3\0\4\4\10\0\1\324\30\4\16\0\1\4"+
    "\7\0\21\4\3\0\4\4\10\0\2\4\1\112\26\4"+
    "\16\0\1\4\7\0\21\4\3\0\4\4\10\0\15\4"+
    "\1\325\13\4\16\0\1\4\7\0\21\4\3\0\4\4"+
    "\10\0\2\4\1\326\26\4\16\0\1\4\7\0\21\4"+
    "\3\0\4\4\10\0\1\327\30\4\16\0\1\4\7\0"+
    "\21\4\3\0\4\4\10\0\16\4\1\330\12\4\16\0"+
    "\1\4\7\0\21\4\3\0\4\4\10\0\22\4\1\117"+
    "\6\4\16\0\1\4\7\0\21\4\3\0\4\4\10\0"+
    "\12\4\1\331\16\4\16\0\1\4\7\0\21\4\3\0"+
    "\4\4\10\0\17\4\1\112\11\4\16\0\1\4\7\0"+
    "\21\4\3\0\4\4\10\0\14\4\1\144\14\4\16\0"+
    "\1\4\7\0\21\4\3\0\4\4\10\0\15\4\1\277"+
    "\13\4\16\0\1\4\7\0\21\4\3\0\4\4\10\0"+
    "\6\4\1\332\22\4\16\0\1\4\7\0\21\4\3\0"+
    "\4\4\10\0\1\333\11\4\1\334\16\4\16\0\1\4"+
    "\7\0\21\4\3\0\4\4\10\0\4\4\1\335\24\4"+
    "\16\0\1\4\7\0\21\4\3\0\4\4\10\0\16\4"+
    "\1\336\12\4\16\0\1\4\7\0\21\4\3\0\4\4"+
    "\10\0\12\4\1\337\16\4\16\0\1\4\7\0\21\4"+
    "\3\0\4\4\10\0\1\214\30\4\16\0\1\4\7\0"+
    "\21\4\3\0\4\4\10\0\3\4\1\340\25\4\16\0"+
    "\1\4\7\0\21\4\3\0\4\4\10\0\12\4\1\341"+
    "\16\4\16\0\1\4\7\0\21\4\3\0\4\4\10\0"+
    "\1\342\30\4\16\0\1\4\7\0\21\4\3\0\4\4"+
    "\10\0\11\4\1\343\17\4\16\0\1\4\7\0\12\171"+
    "\1\344\6\171\3\0\4\171\10\0\14\171\1\344\14\171"+
    "\16\0\1\171\6\0\25\254\1\316\2\254\1\316\6\254"+
    "\1\0\46\254\2\0\1\101\7\254\6\317\16\254\4\317"+
    "\6\254\1\0\1\254\2\317\3\254\1\317\1\254\1\317"+
    "\2\254\1\317\4\254\1\317\25\254\2\0\1\101\6\254"+
    "\1\0\21\4\3\0\4\4\10\0\1\345\30\4\16\0"+
    "\1\4\7\0\21\4\3\0\4\4\10\0\5\4\1\112"+
    "\23\4\16\0\1\4\7\0\21\4\3\0\4\4\10\0"+
    "\6\4\1\112\22\4\16\0\1\4\7\0\21\4\3\0"+
    "\4\4\10\0\4\4\1\346\24\4\16\0\1\4\7\0"+
    "\21\4\3\0\4\4\10\0\1\4\1\245\27\4\16\0"+
    "\1\4\7\0\21\4\3\0\4\4\10\0\6\4\1\347"+
    "\22\4\16\0\1\4\7\0\21\4\3\0\4\4\10\0"+
    "\21\4\1\350\7\4\16\0\1\4\7\0\21\4\3\0"+
    "\4\4\10\0\4\4\1\131\24\4\16\0\1\4\7\0"+
    "\21\4\3\0\4\4\10\0\11\4\1\224\17\4\16\0"+
    "\1\4\7\0\21\4\3\0\4\4\10\0\5\4\1\222"+
    "\23\4\16\0\1\4\7\0\21\4\3\0\4\4\10\0"+
    "\7\4\1\270\21\4\16\0\1\4\7\0\21\4\3\0"+
    "\4\4\10\0\6\4\1\351\22\4\16\0\1\4\7\0"+
    "\21\4\3\0\4\4\10\0\1\352\30\4\16\0\1\4"+
    "\7\0\21\4\3\0\4\4\10\0\17\4\1\350\11\4"+
    "\16\0\1\4\7\0\21\4\3\0\4\4\10\0\7\4"+
    "\1\346\21\4\16\0\1\4\7\0\21\4\3\0\4\4"+
    "\10\0\20\4\1\353\10\4\16\0\1\4\7\0\21\4"+
    "\3\0\4\4\10\0\15\4\1\354\13\4\16\0\1\4"+
    "\7\0\21\4\3\0\4\4\10\0\5\4\1\355\23\4"+
    "\16\0\1\4\7\0\21\4\3\0\4\4\10\0\3\4"+
    "\1\131\25\4\16\0\1\4\7\0\21\4\3\0\4\4"+
    "\10\0\3\4\1\356\25\4\16\0\1\4\7\0\14\171"+
    "\1\357\4\171\3\0\4\171\10\0\4\171\1\357\24\171"+
    "\16\0\1\171\7\0\21\4\3\0\4\4\10\0\5\4"+
    "\1\224\23\4\16\0\1\4\7\0\21\4\3\0\4\4"+
    "\10\0\12\4\1\360\16\4\16\0\1\4\7\0\21\4"+
    "\3\0\4\4\10\0\16\4\1\131\12\4\16\0\1\4"+
    "\7\0\21\4\3\0\4\4\10\0\1\361\30\4\16\0"+
    "\1\4\7\0\21\4\3\0\4\4\10\0\5\4\1\362"+
    "\23\4\16\0\1\4\7\0\21\4\3\0\4\4\10\0"+
    "\7\4\1\363\21\4\16\0\1\4\7\0\21\4\3\0"+
    "\4\4\10\0\12\4\1\364\16\4\16\0\1\4\7\0"+
    "\21\4\3\0\4\4\10\0\14\4\1\322\14\4\16\0"+
    "\1\4\7\0\21\4\3\0\4\4\10\0\3\4\1\365"+
    "\25\4\16\0\1\4\7\0\21\4\3\0\4\4\10\0"+
    "\26\4\1\366\2\4\16\0\1\4\7\0\3\171\1\367"+
    "\15\171\3\0\4\171\10\0\7\171\1\367\21\171\16\0"+
    "\1\171\7\0\21\4\3\0\4\4\10\0\26\4\1\370"+
    "\2\4\16\0\1\4\7\0\21\4\3\0\4\4\10\0"+
    "\5\4\1\131\23\4\16\0\1\4\7\0\21\4\3\0"+
    "\4\4\10\0\12\4\1\363\16\4\16\0\1\4\7\0"+
    "\21\4\3\0\4\4\10\0\14\4\1\277\14\4\16\0"+
    "\1\4\7\0\21\4\3\0\4\4\10\0\6\4\1\371"+
    "\22\4\16\0\1\4\7\0\21\4\3\0\4\4\10\0"+
    "\12\4\1\372\16\4\16\0\1\4\7\0\21\4\3\0"+
    "\4\4\10\0\5\4\1\373\23\4\16\0\1\4\7\0"+
    "\15\171\1\374\3\171\3\0\4\171\10\0\2\171\1\374"+
    "\26\171\16\0\1\171\7\0\21\4\3\0\4\4\10\0"+
    "\14\4\1\375\14\4\16\0\1\4\7\0\21\4\3\0"+
    "\4\4\10\0\3\4\1\270\25\4\16\0\1\4\7\0"+
    "\21\4\3\0\4\4\10\0\7\4\1\112\21\4\16\0"+
    "\1\4\7\0\21\4\3\0\4\4\10\0\14\4\1\376"+
    "\14\4\16\0\1\4\7\0\4\171\1\377\14\171\3\0"+
    "\4\171\10\0\12\171\1\377\16\171\16\0\1\171\7\0"+
    "\21\4\3\0\4\4\10\0\6\4\1\361\22\4\16\0"+
    "\1\4\7\0\21\4\3\0\4\4\10\0\20\4\1\u0100"+
    "\10\4\16\0\1\4\7\0\16\171\1\u0101\2\171\3\0"+
    "\4\171\10\0\3\171\1\u0101\25\171\16\0\1\171\7\0"+
    "\21\4\3\0\4\4\10\0\21\4\1\u0102\7\4\16\0"+
    "\1\4\7\0\21\171\3\0\4\171\1\0\1\u0103\6\0"+
    "\31\171\16\0\1\171\7\0\21\4\3\0\4\4\10\0"+
    "\15\4\1\u0104\13\4\16\0\1\4\117\0\1\u0105\1\0"+
    "\1\u0106\4\0\21\4\3\0\4\4\10\0\11\4\1\u0107"+
    "\17\4\16\0\1\4\6\0\37\u0105\1\0\51\u0105\1\u0108"+
    "\1\u0109\4\u0105\37\u0106\1\0\52\u0106\1\u010a\1\u0108\3\u0106"+
    "\1\0\21\4\3\0\4\4\10\0\12\4\1\152\16\4"+
    "\16\0\1\4\41\0\1\u010b\63\0\37\u0105\1\0\46\u0105"+
    "\3\0\6\u0105\37\u0106\1\0\46\u0106\3\0\6\u0106";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19276];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\13\1\5\11\41\1\1\11\3\1\1\11"+
    "\5\1\1\0\2\11\6\1\2\0\45\1\3\11\1\0"+
    "\1\11\1\1\1\0\1\11\3\0\4\1\1\0\3\1"+
    "\1\0\46\1\1\0\2\1\1\0\40\1\1\11\66\1"+
    "\1\0\1\1\2\0\1\1\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[267];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String myLexer;
public int countLine = 0;
public int chars = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 238) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { chars += yytext().length(); myLexer = yytext();return ERROR;
            }
          case 27: break;
          case 2: 
            { chars += yytext().length(); myLexer=yytext(); return CONSTANT;
            }
          case 28: break;
          case 3: 
            { chars += yytext().length(); myLexer=yytext(); return COMPOPERATOR;
            }
          case 29: break;
          case 4: 
            { chars += yytext().length(); myLexer=yytext(); return CONTROLSTRUCT;
            }
          case 30: break;
          case 5: 
            { chars += yytext().length(); myLexer=yytext(); return INT;
            }
          case 31: break;
          case 6: 
            { chars += yytext().length(); myLexer=yytext(); return PARENTHESIS;
            }
          case 32: break;
          case 7: 
            { chars += yytext().length(); myLexer=yytext(); return BRACKETS;
            }
          case 33: break;
          case 8: 
            { chars += yytext().length(); myLexer=yytext(); return KEYS;
            }
          case 34: break;
          case 9: 
            { chars += yytext().length(); myLexer=yytext(); return COMA;
            }
          case 35: break;
          case 10: 
            { chars += yytext().length(); myLexer=yytext(); return SEMICOLON;
            }
          case 36: break;
          case 11: 
            { chars = 0; countLine++; myLexer="\n"; return NEWLINE;
            }
          case 37: break;
          case 12: 
            { chars += yytext().length(); myLexer=yytext(); return BLANKSPACE;
            }
          case 38: break;
          case 13: 
            { chars += yytext().length(); myLexer=yytext(); return AROPERATOR;
            }
          case 39: break;
          case 14: 
            { chars += yytext().length(); myLexer=yytext(); return LOGOPERATOR;
            }
          case 40: break;
          case 15: 
            { chars += yytext().length(); myLexer=yytext(); return ASSIGNOPERATOR;
            }
          case 41: break;
          case 16: 
            { chars += yytext().length(); myLexer=yytext(); return CONCAT;
            }
          case 42: break;
          case 17: 
            { chars += yytext().length(); myLexer=yytext(); return AT;
            }
          case 43: break;
          case 18: 
            { chars += yytext().length(); if(yytext().contains("\n")){chars=0; countLine++;} myLexer=yytext(); return COMMENT;
            }
          case 44: break;
          case 19: 
            { chars += yytext().length(); myLexer=yytext(); return PHP;
            }
          case 45: break;
          case 20: 
            { chars += yytext().length(); myLexer=yytext(); return DOUBLE;
            }
          case 46: break;
          case 21: 
            { chars += yytext().length(); myLexer=yytext(); return RESERVEDWORDS;
            }
          case 47: break;
          case 22: 
            { chars += yytext().length(); myLexer=yytext(); return INCDECOPERATOR;
            }
          case 48: break;
          case 23: 
            { chars += yytext().length(); myLexer=yytext(); return STRING;
            }
          case 49: break;
          case 24: 
            { chars += yytext().length(); myLexer=yytext(); return IDVAR;
            }
          case 50: break;
          case 25: 
            { chars += yytext().length(); myLexer=yytext(); return BOOL;
            }
          case 51: break;
          case 26: 
            { chars += yytext().length(); myLexer=yytext(); return DB;
            }
          case 52: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
